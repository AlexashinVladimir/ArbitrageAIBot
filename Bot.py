import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv

import db
import keyboards as kb


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
PAYMENTS_PROVIDER_TOKEN = os.getenv("PAYMENTS_PROVIDER_TOKEN")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class CategoryStates(StatesGroup):
    waiting_for_title = State()


class CourseStates(StatesGroup):
    waiting_for_category = State()
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_price = State()


def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_ID


# ---------- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ----------

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –∫—É—Ä—Å–æ–≤.",
        reply_markup=kb.main_menu(is_admin(message.from_user.id == ADMIN_ID))
    )


@dp.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_bot(message: Message):
    await message.answer("üìå –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å –∫—É—Ä—Å—ã –ø—Ä—è–º–æ –≤ Telegram.")


# ---------- –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ ----------

@dp.message(F.text == "üìö –ö—É—Ä—Å—ã")
async def show_categories(message: Message):
    categories = await db.get_categories()
    if not categories:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.categories_inline(categories))


@dp.callback_query(F.data.startswith("category:"))
async def show_courses(callback: CallbackQuery):
    cat_id = int(callback.data.split(":")[1])
    courses = await db.get_courses(cat_id)
    if not courses:
        await callback.message.edit_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤.")
    else:
        for c in courses:
            text = f"<b>{c['title']}</b>\n\n{c['description']}"
            await callback.message.answer(text, reply_markup=kb.courses_inline([c]))
    await callback.answer()


# ---------- –ü–æ–∫—É–ø–∫–∞ ----------

@dp.callback_query(F.data.startswith("buy:"))
async def buy_course(callback: CallbackQuery):
    course_id = int(callback.data.split(":")[1])
    course = await db.get_course(course_id)

    if not course:
        await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    prices = [LabeledPrice(label=course['title'], amount=int(course['price']) * 100)]
    await bot.send_invoice(
        callback.message.chat.id,
        title=course['title'],
        description=course['description'],
        payload=f"course_{course['id']}",
        provider_token=PAYMENTS_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices
    )
    await callback.answer()


@dp.pre_checkout_query()
async def process_pre_checkout(pre_checkout: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout.id, ok=True)


@dp.message(F.content_type == "successful_payment")
async def successful_payment(message: Message):
    payload = message.successful_payment.invoice_payload
    course_id = int(payload.split("_")[1])
    course = await db.get_course(course_id)
    await message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–í–æ—Ç –≤–∞—à –∫—É—Ä—Å: {course['title']}")


# ---------- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ----------

@dp.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if not is_admin(message.from_user.id):
        return
    await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb.admin_menu())


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def add_category(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb.cancel_kb())
    await state.set_state(CategoryStates.waiting_for_title)


@dp.message(CategoryStates.waiting_for_title)
async def save_category(message: Message, state: FSMContext):
    await db.add_category(message.text)
    await message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=kb.admin_menu())
    await state.clear()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å")
async def add_course(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    categories = await db.get_categories()
    if not categories:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return
    kb_cats = kb.categories_inline(categories)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∫—É—Ä—Å–∞:", reply_markup=kb_cats)
    await state.set_state(CourseStates.waiting_for_category)


@dp.callback_query(CourseStates.waiting_for_category, F.data.startswith("category:"))
async def course_set_category(callback: CallbackQuery, state: FSMContext):
    cat_id = int(callback.data.split(":")[1])
    await state.update_data(category_id=cat_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=kb.cancel_kb())
    await state.set_state(CourseStates.waiting_for_title)
    await callback.answer()


@dp.message(CourseStates.waiting_for_title)
async def course_set_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=kb.cancel_kb())
    await state.set_state(CourseStates.waiting_for_description)


@dp.message(CourseStates.waiting_for_description)
async def course_set_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫—É—Ä—Å–∞ (–≤ ‚ÇΩ):", reply_markup=kb.cancel_kb())
    await state.set_state(CourseStates.waiting_for_price)


@dp.message(CourseStates.waiting_for_price)
async def course_set_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    data = await state.get_data()
    await db.add_course(
        data["category_id"], data["title"], data["description"], int(message.text)
    )
    await message.answer("‚úÖ –ö—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=kb.admin_menu())
    await state.clear()


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
@dp.message(F.text == "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
async def manage_categories(message: Message):
    if not is_admin(message.from_user.id):
        return
    categories = await db.get_categories()
    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç.", reply_markup=kb.admin_menu())
        return
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb.edit_delete_inline("category", categories))


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏
@dp.message(F.text == "üìò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏")
async def manage_courses(message: Message):
    if not is_admin(message.from_user.id):
        return
    courses = await db.get_all_courses()
    if not courses:
        await message.answer("–ö—É—Ä—Å–æ–≤ –Ω–µ—Ç.", reply_markup=kb.admin_menu())
        return
    await message.answer("–ö—É—Ä—Å—ã:", reply_markup=kb.edit_delete_inline("course", courses))


# –ù–∞–∑–∞–¥ –∏–∑ –º–µ–Ω—é
@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_from_admin(message: Message):
    if is_admin(message.from_user.id):
        await message.answer("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.main_menu(True))
    else:
        await message.answer("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.main_menu(False))


# –û—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_any(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.admin_menu())


# Inline –Ω–∞–∑–∞–¥
@dp.callback_query(F.data == "back_to_admin")
async def back_inline_admin(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=kb.admin_menu())


# ---------- –ó–∞–ø—É—Å–∫ ----------

async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())


