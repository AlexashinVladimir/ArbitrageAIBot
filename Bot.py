# Bot.py ‚Äî –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª
import os
import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery

import db
from texts import START_TEXT, CATEGORY_TEXT, PAYMENT_TEXT, SUCCESS_TEXT, ADMIN_HELP, get_recommendation
from keyboards import main_kb, categories_inline, courses_inline, course_details_keyboard

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN", "")
CURRENCY = os.getenv("CURRENCY", "RUB")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, parse_mode="Markdown")
dp = Dispatcher()

# -------------------- —Å—Ç–∞—Ä—Ç / –ø–æ–º–æ—â—å --------------------
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await db.init_db()  # —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –±–∞–∑–∞ –µ—Å—Ç—å
    await message.answer(START_TEXT, reply_markup=main_kb)

@dp.message(F.text == "‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ò–ò")
async def how_it_works(message: Message):
    await message.answer(CATEGORY_TEXT + "\n" + get_recommendation())

# -------------------- –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ --------------------
@dp.message(F.text == "üìö –ö—É—Ä—Å—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
async def show_categories(message: Message):
    cats = await db.list_categories(active_only=True)
    if not cats:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ê–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö.")
        return
    kb = categories_inline(cats)
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@dp.callback_query(F.data.startswith("cat:"))
async def on_cat(callback: CallbackQuery):
    _, cid = callback.data.split(":")
    cid = int(cid)
    courses = await db.list_courses_by_category(cid, active_only=True)
    if not courses:
        await callback.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
        return
    kb = courses_inline(courses)
    await callback.message.answer("–ö—É—Ä—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb)

# -------------------- –∫–∞—Ä—Ç–æ—á–∫–∞ –∫—É—Ä—Å–∞ (–ø–æ–¥—Ä–æ–±–Ω–µ–µ) --------------------
@dp.callback_query(F.data.startswith("details:"))
async def on_details(callback: CallbackQuery):
    _, course_id = callback.data.split(":")
    course_id = int(course_id)
    row = await db.get_course(course_id)
    if not row:
        await callback.message.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    cid, category_id, title, description, price, link, is_active = row[0], row[1], row[2], row[3], row[4], row[5], row[6]
    ai_comment = get_recommendation()
    text = f"üìå *{title}*\n\nüí∞ –¶–µ–Ω–∞: *{price}‚ÇΩ*\n\n{description}\n\nü§ñ {ai_comment}"
    kb = course_details_keyboard(course_id, price)
    await callback.message.answer(text, reply_markup=kb)

@dp.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: CallbackQuery):
    cats = await db.list_categories(active_only=True)
    kb = categories_inline(cats)
    await callback.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb)

# -------------------- –æ–ø–ª–∞—Ç–∞ (—á–µ—Ä–µ–∑ Telegram Payments –µ—Å–ª–∏ PROVIDER_TOKEN –∑–∞–¥–∞–Ω) --------------------
@dp.callback_query(F.data.startswith("buy:"))
async def on_buy(callback: CallbackQuery):
    if not PROVIDER_TOKEN:
        await callback.message.answer("–ü–ª–∞—Ç—ë–∂–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ωu.")
        return
    _, course_id = callback.data.split(":")
    course_id = int(course_id)
    row = await db.get_course(course_id)
    if not row:
        await callback.message.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    title = row[2]
    price = row[4]  # –≤ —Ä—É–±–ª—è—Ö
    # Telegram Payments –æ–∂–∏–¥–∞–µ—Ç —Å—É–º–º—É –≤ "minor units" (–∫–æ–ø–µ–π–∫–∏)
    amount = int(price) * 100
    prices = [LabeledPrice(label=title, amount=amount)]
    await bot.send_invoice(chat_id=callback.from_user.id,
                           title=title,
                           description=row[3][:255],
                           payload=str(course_id),
                           provider_token=PROVIDER_TOKEN,
                           currency=CURRENCY,
                           prices=prices)
    await callback.answer()

@dp.pre_checkout_query()
async def pre_checkout(pre: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre.id, ok=True)

@dp.message(F.successful_payment)
async def successful_payment(message: Message):
    payment = message.successful_payment
    course_id = int(payment.invoice_payload)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
    await db.add_purchase(user_id=message.from_user.id,
                          course_id=course_id,
                          amount=payment.total_amount,
                          currency=payment.currency,
                          telegram_charge_id=payment.telegram_payment_charge_id,
                          provider_charge_id=payment.provider_payment_charge_id)
    row = await db.get_course(course_id)
    if row:
        link = row[5]
        await message.answer(SUCCESS_TEXT.format(link=link))
    else:
        await message.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞, –Ω–æ –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# -------------------- –ê–î–ú–ò–ù: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –∫—É—Ä—Å–∞–º–∏ (–ø–æ ADMIN_ID) --------------------
# –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã ‚Äî —á–µ—Ä–µ–∑ /commands –∏–ª–∏ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç

@dp.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await message.answer(ADMIN_HELP)

@dp.message(Command("add_category"))
async def add_category_cmd(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    # /add_category –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    parts = message.get_args()
    if not parts:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_category –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return
    name = parts.strip()
    await db.add_category(name)
    await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

@dp.message(Command("del_category"))
async def del_category_cmd(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    args = message.get_args().strip()
    if not args.isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del_category ID")
        return
    cid = int(args)
    await db.delete_category(cid)
    await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {cid} —É–¥–∞–ª–µ–Ω–∞ (–∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã).")

@dp.message(Command("toggle_category"))
async def toggle_category_cmd(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    args = message.get_args().strip()
    if not args.isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /toggle_category ID")
        return
    cid = int(args)
    ok = await db.toggle_category(cid)
    await message.answer("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ." if ok else "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@dp.message(Command("list_categories"))
async def list_categories_cmd(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    cats = await db.list_categories(active_only=False)
    if not cats:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç.")
        return
    lines = []
    for c in cats:
        lines.append(f"{c[0]} ‚Äî {c[1]} {'(–∞–∫—Ç–∏–≤–Ω–∞)' if c[2] else '(—Å–∫—Ä—ã—Ç–∞)'}")
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n" + "\n".join(lines))

# --- –∫—É—Ä—Å—ã ---
@dp.message(Command("add_course"))
async def add_course_cmd(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    # —Ñ–æ—Ä–º–∞—Ç: /add_course <category_id>|<–ù–∞–∑–≤–∞–Ω–∏–µ>|<–û–ø–∏—Å–∞–Ω–∏–µ>|<–¶–µ–Ω–∞>|<–°—Å—ã–ª–∫–∞>
    text = message.get_args()
    if not text or '|' not in text:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_course <category_id>|<–ù–∞–∑–≤–∞–Ω–∏–µ>|<–û–ø–∏—Å–∞–Ω–∏–µ>|<–¶–µ–Ω–∞>|<–°—Å—ã–ª–∫–∞>")
        return
    try:
        parts = [p.strip() for p in text.split("|")]
        category_id = int(parts[0])
        title = parts[1]
        description = parts[2]
        price = int(parts[3])
        link = parts[4]
        await db.add_course(category_id, title, description, price, link)
        await message.answer(f"–ö—É—Ä—Å '{title}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category_id}.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(Command("del_course"))
async def del_course_cmd(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    args = message.get_args().strip()
    if not args.isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del_course ID")
        return
    cid = int(args)
    await db.delete_course(cid)
    await message.answer(f"–ö—É—Ä—Å {cid} —É–¥–∞–ª—ë–Ω.")

@dp.message(Command("list_courses"))
async def list_courses_cmd(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    args = message.get_args().strip()
    if not args.isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /list_courses <category_id>")
        return
    cat_id = int(args)
    courses = await db.list_courses_by_category(cat_id, active_only=False)
    if not courses:
        await message.answer("–ö—É—Ä—Å–æ–≤ –Ω–µ—Ç.")
        return
    lines = []
    for c in courses:
        lines.append(f"{c[0]} ‚Äî {c[1]} ‚Äî {c[3]}‚ÇΩ {'(–∞–∫—Ç–∏–≤–µ–Ω)' if c[5] else '(—Å–∫—Ä—ã—Ç)'}")
    await message.answer("–ö—É—Ä—Å—ã:\n" + "\n".join(lines))

# -------------------- –∑–∞–ø—É—Å–∫ --------------------
async def main():
    await db.init_db()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling)...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
