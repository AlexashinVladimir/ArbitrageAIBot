# Bot.py ‚Äî –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª (Aiogram 3.6)
import asyncio
import logging
import os
import re
from typing import Callable, Optional, Any

from dotenv import load_dotenv
load_dotenv()

from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ContentType
from aiogram.filters import Command, StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery

# –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ (–¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ)
import db
import keyboards as kb
from states import AddCategory, AddCourse, EditCourse

# ----------------- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ -----------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0") or 0)
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN") or os.getenv("PROVIDER_TOKEN") or os.getenv("PAYMENTS_PROVIDER_TOKEN") or ""

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in .env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (—Å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º —É–∫–∞–∑–∞–Ω–∏—è parse_mode)
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# ----------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å db/keyboards) -----------------
def resolve(obj: Any, *names: str) -> Optional[Callable]:
    """
    –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ –≤ obj —Ñ—É–Ω–∫—Ü–∏—é/–∞—Ç—Ä–∏–±—É—Ç –ø–æ–¥ –æ–¥–Ω–∏–º –∏–∑ –∏–º—ë–Ω –≤ names.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç callable –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ None.
    """
    for n in names:
        if hasattr(obj, n):
            return getattr(obj, n)
    return None


def extract_id(data: str) -> Optional[int]:
    """–ò–∑–≤–ª–µ—á—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–∑ callback_data –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏."""
    if not data:
        return None
    m = re.search(r"(\d+)(?!.*\d)", data)
    return int(m.group(1)) if m else None


# Resolve DB functions (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∏–º–µ–Ω–∞)
db_init = resolve(db, "init_db")
db_list_categories = resolve(db, "list_categories", "get_categories", "list_categories")
db_add_category = resolve(db, "add_category", "create_category")
db_list_courses = resolve(db, "list_courses", "get_courses")
db_list_courses_by_category = resolve(db, "list_courses_by_category", "get_courses_by_category", "list_courses_by_category")
db_get_course = resolve(db, "get_course", "get_course_by_id", "fetch_course")
db_add_course = resolve(db, "add_course", "create_course")
db_update_course_field = resolve(db, "update_course_field", "update_course")
db_update_course_full = resolve(db, "update_course", None)
db_delete_course = resolve(db, "delete_course", "remove_course")
db_delete_category = resolve(db, "delete_category")
db_record_purchase = resolve(db, "record_purchase", "add_purchase", "save_purchase")
db_ensure_user = resolve(db, "ensure_user")

# Resolve keyboards functions / objects
kb_main_menu = resolve(kb, "main_menu", "main_kb", "main")
kb_admin_panel = resolve(kb, "admin_panel_kb", "admin_menu", "admin_main_kb", "admin_panel")
kb_choose_category = resolve(kb, "choose_category_kb", "choose_category", "choose_category_keyboard")
kb_buy = resolve(kb, "buy_kb", "course_inline", "course_buy_kb")
kb_course_admin = resolve(kb, "course_manage_kb", "course_admin_inline", "course_admin")


# ----------------- Startup -----------------
async def on_startup():
    try:
        if callable(db_init):
            await db_init()
            logger.info("DB initialized via db.init_db()")
        else:
            # best-effort: if db module has other init function names, try them
            logger.info("db.init_db not found; make sure DB exists")
    except Exception:
        logger.exception("Error during DB init (ignored)")

    # Ensure admin exists if function present
    if db_ensure_user and ADMIN_ID:
        try:
            await db_ensure_user(ADMIN_ID, True)
        except Exception:
            logger.exception("ensure_user failed (ignored)")


# ----------------- Handlers: start / about -----------------
@dp.message(Command("start"))
async def cmd_start(message: Message):
    is_admin = (message.from_user.id == ADMIN_ID)
    # build menu from keyboards (fallback to simple markup)
    try:
        if callable(kb_main_menu):
            menu = kb_main_menu(is_admin) if kb_main_menu.__code__.co_argcount >= 1 else kb_main_menu()
        else:
            # fallback manual
            kb_buttons = [[types.KeyboardButton(text="üìö –ö—É—Ä—Å—ã")], [types.KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ")]]
            if is_admin:
                kb_buttons.append([types.KeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
            menu = types.ReplyKeyboardMarkup(keyboard=kb_buttons, resize_keyboard=True)
    except Exception:
        menu = None

    await message.answer(
        "üëã –Ø —Ç–≤–æ–π —Ü–∏–Ω–∏—á–Ω—ã–π –ò–ò-–º–µ–Ω—Ç–æ—Ä ‚Äî –Ω–µ –Ω–∞–¥–æ –º–Ω–µ –ª—å—Å—Ç–∏—Ç—å.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=menu
    )


@dp.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_handler(message: Message):
    await message.answer("–Ø —Ü–∏–Ω–∏—á–Ω—ã–π –ò–ò: –Ω–µ–º–Ω–æ–≥–æ —Å–∞—Ä–∫–∞–∑–º–∞, –Ω–µ–º–Ω–æ–≥–æ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏, –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")


# ----------------- Handlers: list categories / courses -----------------
@dp.message(F.text == "üìö –ö—É—Ä—Å—ã")
async def msg_list_categories(message: Message):
    try:
        cats = await db_list_categories() if callable(db_list_categories) else []
    except Exception:
        logger.exception("Failed to load categories")
        cats = []

    if not cats:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    # try to render categories keyboard from kb (if exists)
    try:
        if callable(resolve(kb, "categories_inline", "categories_admin_inline")):
            kb_fn = resolve(kb, "categories_inline", "categories_admin_inline")
            kb_markup = kb_fn([dict(c) for c in cats])
            await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb_markup)
            return
    except Exception:
        logger.debug("kb.categories_inline failed ‚Äî falling back")

    # fallback: inline keyboard
    buttons = []
    for c in cats:
        cid = c["id"] if isinstance(c, dict) else c[0]
        title = c["title"] if isinstance(c, dict) else str(c[1])
        buttons.append([types.InlineKeyboardButton(text=title, callback_data=f"category:{cid}")])
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons))


@dp.callback_query(F.data.startswith("category:") | F.data.startswith("category_") | F.data.regexp(r'category[-:]\d+$'))
async def callback_category(callback: CallbackQuery):
    await callback.answer()
    cid = extract_id(callback.data)
    if cid is None:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return

    try:
        courses = await (db_list_courses_by_category(cid) if callable(db_list_courses_by_category) else (db_list_courses() if callable(db_list_courses) else []))
    except Exception:
        logger.exception("Failed to get courses for category")
        courses = []

    if not courses:
        await callback.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤.")
        return

    for c in courses:
        course = dict(c) if not isinstance(c, dict) else c
        text = f"<b>{course.get('title')}</b>\n\n{course.get('description','')}\n\n–¶–µ–Ω–∞: {course.get('price',0)} ‚ÇΩ"
        # try kb.buy (function that formats button)
        try:
            if callable(kb_buy):
                # some kb functions expect (price, id) or (course)
                try:
                    kb_markup = kb_buy(course)  # prefer passing course dict
                except Exception:
                    try:
                        kb_markup = kb_buy(course.get('price', 0), course['id'])
                    except Exception:
                        kb_markup = None
                if kb_markup:
                    await callback.message.answer(text, reply_markup=kb_markup)
                    continue
        except Exception:
            logger.debug("kb.buy failed ‚Äî fallback to simple inline")

        # fallback inline buy button
        buy_btn = types.InlineKeyboardButton(text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å ‚Äî {course.get('price',0)} ‚ÇΩ", callback_data=f"buy:{course['id']}")
        await callback.message.answer(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[buy_btn]]))


# ----------------- Payment handlers -----------------
@dp.callback_query(F.data.startswith("buy:") | F.data.startswith("buy_") | F.data.regexp(r'buy[-:]\d+$'))
async def callback_buy(callback: CallbackQuery):
    await callback.answer()
    cid = extract_id(callback.data)
    if cid is None:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫—É—Ä—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
        return

    try:
        course = await db_get_course(cid) if callable(db_get_course) else None
    except Exception:
        logger.exception("Failed to load course for buy")
        course = None

    if not course:
        await callback.message.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    course = dict(course) if not isinstance(course, dict) else course
    price_rub = int(course.get("price", 0))

    if price_rub <= 0:
        await callback.message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –∫—É—Ä—Å–∞.")
        return

    if not PAYMENT_PROVIDER_TOKEN:
        await callback.message.answer("–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É.")
        return

    prices = [LabeledPrice(label=course.get("title", "–ö—É—Ä—Å"), amount=price_rub * 100)]
    payload = f"course:{cid}"
    try:
        await bot.send_invoice(
            chat_id=callback.from_user.id,
            title=course.get("title", "–ö—É—Ä—Å"),
            description=course.get("description", "") or "",
            payload=payload,
            provider_token=PAYMENT_PROVIDER_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter=f"buy_{cid}",
        )
    except Exception:
        logger.exception("send_invoice failed")
        await callback.message.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ PROVIDER_TOKEN.")


@dp.pre_checkout_query()
async def precheckout(q: PreCheckoutQuery):
    try:
        await bot.answer_pre_checkout_query(q.id, ok=True)
    except Exception:
        logger.exception("pre_checkout failed")


@dp.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: Message):
    try:
        payload = message.successful_payment.invoice_payload or ""
        cid = None
        if payload.startswith("course:"):
            cid = int(payload.split(":",1)[1])
        # record purchase (if function available)
        if cid and callable(db_record_purchase):
            try:
                await db_record_purchase(message.from_user.id, cid)
            except Exception:
                logger.exception("record_purchase failed")
        # respond with course link if available
        if cid and callable(db_get_course):
            c = await db_get_course(cid)
            if c:
                c = dict(c) if not isinstance(c, dict) else c
                link = c.get("link")
                text = f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ö—É—Ä—Å ¬´{c.get('title')}¬ª"
                if link:
                    await message.answer(f"{text}\n\n–°—Å—ã–ª–∫–∞: {link}")
                    return
        await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.")
    except Exception:
        logger.exception("successful_payment handler error")
        await message.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚Äî –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")


# ----------------- Admin: panel, categories, courses CRUD -----------------
@dp.message(F.text.in_({"üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", "‚öôÔ∏è –ê–¥–º–∏–Ω", "–ê–¥–º–∏–Ω"}))
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    # try to use admin keyboard
    try:
        kb_markup = kb_admin_panel() if callable(kb_admin_panel) else kb_admin_panel
    except Exception:
        kb_markup = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏")],
                [types.KeyboardButton(text="üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")],
                [types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å")],
                [types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")],
                [types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb_markup)


# Admin: add category (callback or message)
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def admin_add_category_start(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await state.set_state(AddCategory.waiting_for_title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb.choose_category_kb([]) if callable(kb_choose_category) else None)


@dp.message(StateFilter(AddCategory.waiting_for_title))
async def admin_add_category_finish(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    if callable(db_add_category):
        await db_add_category(message.text)
        await state.clear()
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    else:
        await state.clear()
        await message.answer("DB: add_category –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")


# Admin: list/manage courses
@dp.message(F.text == "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏")
async def admin_manage_courses(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        courses = await (db_list_courses() if callable(db_list_courses) else [])
    except Exception:
        logger.exception("list courses failed")
        courses = []
    if not courses:
        await message.answer("–ö—É—Ä—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    # try to use admin inline keyboard
    try:
        admin_courses_kb = resolve(kb, "admin_courses_inline", "admin_courses", "admin_courses_kb")
        if callable(admin_courses_kb):
            await message.answer("–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤:", reply_markup=admin_courses_kb([dict(c) for c in courses]))
            return
    except Exception:
        logger.debug("kb.admin_courses_inline failed")
    # fallback: list with inline per-course manage button
    for c in courses:
        course = dict(c) if not isinstance(c, dict) else c
        text = f"<b>{course.get('title')}</b>\n{course.get('description','')}\n–¶–µ–Ω–∞: {course.get('price')} ‚ÇΩ"
        # build manage inline
        manage = None
        try:
            if callable(kb_course_admin):
                manage = kb_course_admin(course['id'])
        except Exception:
            manage = None
        if not manage:
            manage = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit:{course['id']}")],
                [types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{course['id']}")]
            ])
        await message.answer(text, reply_markup=manage)


@dp.callback_query(F.data.startswith("delete:") | F.data.startswith("delete_") | F.data.startswith("delete-course") | F.data.startswith("delete_course:") )
async def admin_delete_course_cb(callback: CallbackQuery):
    await callback.answer()
    cid = extract_id(callback.data)
    if cid is None:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    if callable(db_delete_course):
        await db_delete_course(cid)
        await callback.message.answer("–ö—É—Ä—Å —É–¥–∞–ª—ë–Ω.")
    else:
        await callback.message.answer("DB: delete_course –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.")


@dp.callback_query(F.data.startswith("edit:") | F.data.startswith("edit_") | F.data.startswith("edit-course") | F.data.startswith("edit_course:"))
async def admin_edit_course_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    cid = extract_id(callback.data)
    if cid is None:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫—É—Ä—Å.")
        return
    await state.update_data(course_id=cid)
    await state.set_state(EditCourse.waiting_for_new_title)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ (–∏–ª–∏ ‚ùå –û—Ç–º–µ–Ω–∞):")


@dp.message(StateFilter(EditCourse.waiting_for_new_title))
async def admin_edit_title(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    await state.update_data(new_title=message.text)
    await state.set_state(EditCourse.waiting_for_new_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")


@dp.message(StateFilter(EditCourse.waiting_for_new_description))
async def admin_edit_description(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    await state.update_data(new_description=message.text)
    await state.set_state(EditCourse.waiting_for_new_price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):")


@dp.message(StateFilter(EditCourse.waiting_for_new_price))
async def admin_edit_price(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    if not message.text.isdigit():
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    await state.update_data(new_price=int(message.text))
    await state.set_state(EditCourse.waiting_for_new_link)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:")


@dp.message(StateFilter(EditCourse.waiting_for_new_link))
async def admin_edit_link(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    data = await state.get_data()
    cid = data.get("course_id")
    # Prefer full update function
    try:
        if callable(db_update_course_full):
            await db_update_course_full(cid, data.get("new_title"), data.get("new_description"), data.get("new_price"), message.text)
        elif callable(db_update_course_field):
            await db_update_course_field(cid, "title", data.get("new_title"))
            await db_update_course_field(cid, "description", data.get("new_description"))
            await db_update_course_field(cid, "price", data.get("new_price"))
            await db_update_course_field(cid, "link", message.text)
        else:
            await message.answer("DB: no update function available.")
            await state.clear()
            return
        await state.clear()
        await message.answer("–ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except Exception:
        logger.exception("Failed to update course")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞.")
        await state.clear()


# Global cancel
@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_global(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")


# Fallback
@dp.message()
async def fallback(message: Message):
    await message.answer("–Ø –Ω–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é.")


# ----------------- –ó–∞–ø—É—Å–∫ -----------------
async def main():
    await on_startup()
    logger.info("Bot starting polling...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())





