import asyncio
import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode, ContentType
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery
from dotenv import load_dotenv

import aiosqlite

import db
import keyboards as kb
from states import AddCategory, AddCourse, EditCourse

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
PAYMENTS_PROVIDER_TOKEN = os.getenv("PAYMENTS_PROVIDER_TOKEN")

if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
if not PAYMENTS_PROVIDER_TOKEN:
    raise ValueError("‚ùå PAYMENTS_PROVIDER_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# ===========================
# üîπ –û–±—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
# ===========================

@dp.message(Command("start"))
async def cmd_start(message: Message):
    admin = message.from_user.id == ADMIN_ID
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å –∏–ª–∏ –ø–æ–∑–Ω–∞—Ç—å –∏—Å—Ç–∏–Ω—É —á–µ—Ä–µ–∑ –º–æ–∏ —Å–ª–æ–≤–∞.",
        reply_markup=kb.main_menu(admin)
    )


@dp.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_handler(message: Message):
    await message.answer(
        "–Ø —Ü–∏–Ω–∏—á–Ω—ã–π –ò–ò. –ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–¥–∞—Ç—å —Ç–µ–±–µ –∑–Ω–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏–∑–º–µ–Ω–∏—Ç —Ç–≤–æ—é –∂–∏–∑–Ω—å. "
        "–ï—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç ‚Äî —ç—Ç–æ —É–∂–µ —Ç–≤–æ—è –≤–∏–Ω–∞."
    )


# ===========================
# üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –∫—É—Ä—Å—ã
# ===========================

@dp.message(F.text == "üìö –ö—É—Ä—Å—ã")
async def list_categories(message: Message):
    async with aiosqlite.connect(db.DB_PATH) as conn:
        conn.row_factory = aiosqlite.Row
        cur = await conn.execute("SELECT * FROM categories")
        categories = await cur.fetchall()

    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.categories_inline([dict(c) for c in categories]))


@dp.callback_query(F.data.startswith("category:"))
async def list_courses(callback: types.CallbackQuery):
    cat_id = int(callback.data.split(":")[1])
    async with aiosqlite.connect(db.DB_PATH) as conn:
        conn.row_factory = aiosqlite.Row
        cur = await conn.execute("SELECT * FROM courses WHERE category_id=?", (cat_id,))
        courses = await cur.fetchall()

    if not courses:
        await callback.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤.")
        await callback.answer()
        return

    for c in courses:
        text = f"<b>{c['title']}</b>\n\n{c['description']}\n\n–¶–µ–Ω–∞: {c['price']} —Ä—É–±."
        await callback.message.answer(text, reply_markup=kb.course_inline(c["id"]))

    await callback.answer()


@dp.callback_query(F.data.startswith("buy:"))
async def buy_course(callback: types.CallbackQuery):
    course_id = int(callback.data.split(":")[1])

    async with aiosqlite.connect(db.DB_PATH) as conn:
        conn.row_factory = aiosqlite.Row
        cur = await conn.execute("SELECT * FROM courses WHERE id=?", (course_id,))
        course = await cur.fetchone()

    if not course:
        await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    prices = [LabeledPrice(label=course["title"], amount=course["price"] * 100)]

    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title=course["title"],
        description=course["description"],
        payload=str(course_id),
        provider_token=PAYMENTS_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices
    )
    await callback.answer()


@dp.pre_checkout_query()
async def pre_checkout(pre_checkout_q: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: Message):
    course_id = int(message.successful_payment.invoice_payload)
    user_id = message.from_user.id

    async with aiosqlite.connect(db.DB_PATH) as conn:
        await conn.execute(
            "INSERT OR IGNORE INTO purchases (user_id, course_id) VALUES (?, ?)",
            (user_id, course_id)
        )
        await conn.commit()

        cur = await conn.execute("SELECT link FROM courses WHERE id=?", (course_id,))
        row = await cur.fetchone()

    if row and row["link"]:
        await message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞: {row['link']}")
    else:
        await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ —Å—Å—ã–ª–∫–∞ –∫ –∫—É—Ä—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω—É.")


# ===========================
# üîπ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
# ===========================

@dp.message(F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É.", reply_markup=kb.admin_menu)


# --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ---

@dp.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
async def manage_categories(message: Message):
    async with aiosqlite.connect(db.DB_PATH) as conn:
        conn.row_factory = aiosqlite.Row
        cur = await conn.execute("SELECT * FROM categories")
        categories = await cur.fetchall()

    await message.answer(
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=kb.categories_admin_inline([dict(c) for c in categories])
    )


@dp.callback_query(F.data == "admin_add_category")
async def add_category_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb.cancel_kb)
    await state.set_state(AddCategory.waiting_for_title)
    await callback.answer()


@dp.message(StateFilter(AddCategory.waiting_for_title))
async def add_category_finish(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–∞.", reply_markup=kb.main_menu(message.from_user.id == ADMIN_ID))
        return

    async with aiosqlite.connect(db.DB_PATH) as conn:
        await conn.execute("INSERT INTO categories (title) VALUES (?)", (message.text,))
        await conn.commit()

    await message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=kb.admin_menu)
    await state.clear()


@dp.callback_query(F.data.startswith("delcat:"))
async def delete_category(callback: types.CallbackQuery):
    cat_id = int(callback.data.split(":")[1])
    async with aiosqlite.connect(db.DB_PATH) as conn:
        await conn.execute("DELETE FROM categories WHERE id=?", (cat_id,))
        await conn.commit()

    await callback.message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞.")
    await callback.answer()


# --- –ö—É—Ä—Å—ã ---

@dp.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏")
async def manage_courses(message: Message):
    async with aiosqlite.connect(db.DB_PATH) as conn:
        conn.row_factory = aiosqlite.Row
        cur = await conn.execute("SELECT * FROM courses")
        courses = await cur.fetchall()

    if not courses:
        await message.answer("–ö—É—Ä—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=kb.admin_menu)
        return

    await message.answer(
        "–ö—É—Ä—Å—ã:",
        reply_markup=kb.admin_courses_inline([dict(c) for c in courses])
    )


@dp.callback_query(F.data == "admin_add_course")
async def add_course_start(callback: types.CallbackQuery, state: FSMContext):
    async with aiosqlite.connect(db.DB_PATH) as conn:
        conn.row_factory = aiosqlite.Row
        cur = await conn.execute("SELECT * FROM categories")
        categories = await cur.fetchall()

    if not categories:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        await callback.answer()
        return

    buttons = [[types.KeyboardButton(text=c["title"])] for c in categories]
    kb_select = types.ReplyKeyboardMarkup(
        keyboard=buttons + [[types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )

    await callback.message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb_select)
    await state.set_state(AddCourse.waiting_for_category)
    await callback.answer()


@dp.message(StateFilter(AddCourse.waiting_for_category))
async def add_course_category(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–∞.", reply_markup=kb.admin_menu)
        return

    async with aiosqlite.connect(db.DB_PATH) as conn:
        cur = await conn.execute("SELECT id FROM categories WHERE title=?", (message.text,))
        row = await cur.fetchone()

    if not row:
        await message.answer("–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(category_id=row[0])
    await state.set_state(AddCourse.waiting_for_title)
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=kb.cancel_kb)


@dp.message(StateFilter(AddCourse.waiting_for_title))
async def add_course_title(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–∞.", reply_markup=kb.admin_menu)
        return

    await state.update_data(title=message.text)
    await state.set_state(AddCourse.waiting_for_description)
    await message.answer("–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=kb.cancel_kb)


@dp.message(StateFilter(AddCourse.waiting_for_description))
async def add_course_desc(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–∞.", reply_markup=kb.admin_menu)
        return

    await state.update_data(description=message.text)
    await state.set_state(AddCourse.waiting_for_price)
    await message.answer("–í–≤–µ–¥–∏ —Ü–µ–Ω—É –∫—É—Ä—Å–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", reply_markup=kb.cancel_kb)


@dp.message(StateFilter(AddCourse.waiting_for_price))
async def add_course_price(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–∞.", reply_markup=kb.admin_menu)
        return

    if not message.text.isdigit():
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    await state.update_data(price=int(message.text))
    await state.set_state(AddCourse.waiting_for_link)
    await message.answer("–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫—É—Ä—Å:", reply_markup=kb.cancel_kb)


@dp.message(StateFilter(AddCourse.waiting_for_link))
async def add_course_link(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–∞.", reply_markup=kb.admin_menu)
        return

    data = await state.get_data()
    async with aiosqlite.connect(db.DB_PATH) as conn:
        await conn.execute(
            "INSERT INTO courses (category_id, title, description, price, link) VALUES (?, ?, ?, ?, ?)",
            (data["category_id"], data["title"], data["description"], data["price"], message.text)
        )
        await conn.commit()

    await state.clear()
    await message.answer("‚úÖ –ö—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=kb.admin_menu)


# ===========================
# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ===========================

async def main():
    await db.init_db()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())





