import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.enums import ParseMode

import keyboards as kb
import db


logging.basicConfig(level=logging.INFO)

BOT_TOKEN = "–¢–û–ö–ï–ù_–¢–í–û–ï–ì–û_–ë–û–¢–ê"
PAYMENT_PROVIDER_TOKEN = "381764678:TEST:1122334455667788"  # —Ç–µ—Å—Ç–æ–≤—ã–π –ÆKassa

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()


# --- FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∫—É—Ä—Å–æ–≤ ---
class AddCategory(StatesGroup):
    waiting_for_title = State()


class AddCourse(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_link = State()
    waiting_for_category = State()


# --- –°—Ç–∞—Ä—Ç ---
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    is_admin = message.from_user.id in [123456789]  # –≤–ø–∏—à–∏ —Å–≤–æ–π Telegram ID
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –î–∞, —è –±–æ—Ç, –∏ —É –º–µ–Ω—è —Ü–∏–Ω–∏—á–Ω–∞—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è. –ù–æ –µ—Å–ª–∏ —Ç—ã —Ç—É—Ç ‚Äî –∑–Ω–∞—á–∏—Ç –∏—â–µ—à—å —Ä–æ—Å—Ç.",
        reply_markup=kb.main_menu(admin=is_admin)
    )


# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ ---
@dp.message(F.text == "üìö –ö—É—Ä—Å—ã")
async def show_categories(message: Message):
    categories = await db.get_categories()
    if not categories:
        return await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
    await message.answer("–í—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.categories_keyboard(categories))


@dp.callback_query(F.data.startswith("category:"))
async def show_courses(cb: CallbackQuery):
    cat_id = int(cb.data.split(":")[1])
    courses = await db.get_courses(cat_id)
    if not courses:
        return await cb.message.edit_text("–ö—É—Ä—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
    await cb.message.edit_text("–í–æ—Ç —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å:", reply_markup=kb.courses_keyboard(courses))


@dp.callback_query(F.data.startswith("course:"))
async def course_details(cb: CallbackQuery):
    course_id = int(cb.data.split(":")[1])
    course = await db.get_course(course_id)
    if not course:
        return await cb.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    text = f"<b>{course['title']}</b>\n\n{course['description']}\n\n–¶–µ–Ω–∞: {course['price']}‚ÇΩ"
    await cb.message.edit_text(text, reply_markup=kb.course_actions(course_id))


# --- –û–ø–ª–∞—Ç–∞ ---
@dp.callback_query(F.data.startswith("buy:"))
async def process_buy(cb: CallbackQuery):
    course_id = int(cb.data.split(":")[1])
    course = await db.get_course(course_id)
    if not course:
        return await cb.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    prices = [LabeledPrice(label=course["title"], amount=int(course["price"]) * 100)]
    await bot.send_invoice(
        chat_id=cb.from_user.id,
        title=course["title"],
        description=course["description"],
        payload=f"course_{course_id}",
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="purchase-course",
    )
    await cb.answer()


@dp.pre_checkout_query()
async def pre_checkout(pre_checkout_q: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message(F.successful_payment)
async def got_payment(message: Message):
    payload = message.successful_payment.invoice_payload
    course_id = int(payload.replace("course_", ""))
    course = await db.get_course(course_id)
    if course:
        await message.answer(f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞: {course['link']}")


# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
@dp.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if message.from_user.id not in [123456789]:
        return await message.answer("–¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
    await message.answer("–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=kb.admin_panel())


@dp.callback_query(F.data == "admin_add_category")
async def admin_add_category(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(AddCategory.waiting_for_title)
    await cb.answer()


@dp.message(AddCategory.waiting_for_title)
async def save_category(message: Message, state: FSMContext):
    await db.add_category(message.text)
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()


@dp.callback_query(F.data == "admin_add_course")
async def admin_add_course(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")
    await state.set_state(AddCourse.waiting_for_title)
    await cb.answer()


@dp.message(AddCourse.waiting_for_title)
async def course_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AddCourse.waiting_for_description)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")


@dp.message(AddCourse.waiting_for_description)
async def course_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddCourse.waiting_for_price)
    await message.answer("–£–∫–∞–∂–∏ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:")


@dp.message(AddCourse.waiting_for_price)
async def course_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    await state.update_data(price=int(message.text))
    await state.set_state(AddCourse.waiting_for_link)
    await message.answer("–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫—É—Ä—Å:")


@dp.message(AddCourse.waiting_for_link)
async def course_link(message: Message, state: FSMContext):
    await state.update_data(link=message.text)
    categories = await db.get_categories()
    if not categories:
        return await message.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
    text = "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    buttons = [
        [InlineKeyboardButton(text=c["title"], callback_data=f"set_course_category:{c['id']}")]
        for c in categories
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await state.set_state(AddCourse.waiting_for_category)
    await message.answer(text, reply_markup=markup)


@dp.callback_query(F.data.startswith("set_course_category:"))
async def course_set_category(cb: CallbackQuery, state: FSMContext):
    cat_id = int(cb.data.split(":")[1])
    data = await state.get_data()
    await db.add_course(
        title=data["title"],
        description=data["description"],
        price=data["price"],
        link=data["link"],
        category_id=cat_id,
    )
    await state.clear()
    await cb.message.answer("–ö—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω!")
    await cb.answer()


# --- Debug handler ---
@dp.callback_query()
async def debug_callback(cb: CallbackQuery):
    print("DEBUG CALLBACK DATA:", cb.data)
    await cb.answer()


# --- Run bot ---
async def main():
    await db.init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

