import asyncio
import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from dotenv import load_dotenv

import db

# === –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
PAYMENT_PROVIDER = os.getenv("PAYMENT_PROVIDER", "381764678:TEST:12345")  # —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()


# === –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM ===
class AddCategory(StatesGroup):
    waiting_for_name = State()


class AddCourse(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_link = State()
    waiting_for_category = State()


# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def main_menu(is_admin: bool = False):
    kb = ReplyKeyboardBuilder()
    kb.button(text="üìö –ö—É—Ä—Å—ã")
    kb.button(text="‚ÑπÔ∏è –û –±–æ—Ç–µ")
    if is_admin:
        kb.button(text="‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
    kb.adjust(2)
    return kb.as_markup(resize_keyboard=True)


def categories_kb(categories):
    kb = InlineKeyboardBuilder()
    for c in categories:
        kb.button(text=c["name"], callback_data=f"category_{c['id']}")
    kb.adjust(1)
    return kb.as_markup()


def courses_kb(courses):
    kb = InlineKeyboardBuilder()
    for c in courses:
        kb.button(text=f"üí∞ –ö—É–ø–∏—Ç—å: {c['price']} ‚ÇΩ", callback_data=f"buy_{c['id']}")
    kb.adjust(1)
    return kb.as_markup()


def admin_menu():
    kb = ReplyKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    kb.adjust(2)
    return kb.as_markup(resize_keyboard=True)


# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
@dp.message(Command("start"))
async def cmd_start(message: Message):
    is_admin = message.from_user.id == ADMIN_ID
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç üëã\n–Ø —Ü–∏–Ω–∏—á–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–∞—ë—Ç –∫—É—Ä—Å—ã. "
        "–í—ã–±–∏—Ä–∞–π, —É—á–∏—Å—å –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å –ª—É—á—à–µ.",
        reply_markup=main_menu(is_admin)
    )


@dp.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about(message: Message):
    await message.answer("ü§ñ –Ø –±–æ—Ç-–∫–∏–æ—Å–∫. –Ø –Ω–µ –¥–∞—é –æ–±–µ—â–∞–Ω–∏–π, —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å—ã –∏ –≥–æ–ª—É—é –ø—Ä–∞–≤–¥—É.")


@dp.message(F.text == "üìö –ö—É—Ä—Å—ã")
async def show_categories(message: Message):
    categories = await db.get_categories()
    if not categories:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_kb(categories))


@dp.callback_query(F.data.startswith("category_"))
async def show_courses(callback: CallbackQuery):
    category_id = int(callback.data.split("_")[1])
    courses = await db.get_courses(category_id)
    if not courses:
        await callback.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤.")
        return
    for c in courses:
        text = f"<b>{c['title']}</b>\n\n{c['description']}"
        await callback.message.answer(text, reply_markup=courses_kb([c]))


@dp.callback_query(F.data.startswith("buy_"))
async def buy_course(callback: CallbackQuery):
    course_id = int(callback.data.split("_")[1])
    courses = await db.get_courses(category_id=1)  # —É–ø—Ä–æ—â—ë–Ω–Ω–æ (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å)
    course = next((c for c in courses if c["id"] == course_id), None)
    if not course:
        await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title=course["title"],
        description=course["description"],
        payload=str(course["id"]),
        provider_token=PAYMENT_PROVIDER,
        currency="RUB",
        prices=[LabeledPrice(label=course["title"], amount=course["price"] * 100)]
    )


@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout.id, ok=True)


@dp.message(F.content_type == "successful_payment")
async def process_successful_payment(message: Message):
    course_id = int(message.successful_payment.invoice_payload)
    courses = await db.get_courses(category_id=1)  # –≤—Ä–µ–º–µ–Ω–Ω–æ
    course = next((c for c in courses if c["id"] == course_id), None)
    if course:
        await message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞!\n–í–æ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É: {course['link']}")


# === –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ===
@dp.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É:", reply_markup=admin_menu())


# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def admin_add_category(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddCategory.waiting_for_name)


@dp.message(AddCategory.waiting_for_name)
async def save_category(message: Message, state: FSMContext):
    await db.add_category(message.text)
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ", reply_markup=main_menu(True))
    await state.clear()


# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ ===
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å")
async def admin_add_course(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddCourse.waiting_for_title)


@dp.message(AddCourse.waiting_for_title)
async def course_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")
    await state.set_state(AddCourse.waiting_for_description)


@dp.message(AddCourse.waiting_for_description)
async def course_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫—É—Ä—Å–∞ (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(AddCourse.waiting_for_price)


@dp.message(AddCourse.waiting_for_price)
async def course_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (—Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö):")
        return
    await state.update_data(price=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫—É—Ä—Å:")
    await state.set_state(AddCourse.waiting_for_link)


@dp.message(AddCourse.waiting_for_link)
async def course_link(message: Message, state: FSMContext):
    await state.update_data(link=message.text)
    categories = await db.get_categories()
    kb = InlineKeyboardBuilder()
    for c in categories:
        kb.button(text=c["name"], callback_data=f"coursecat_{c['id']}")
    kb.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∫—É—Ä—Å–∞:", reply_markup=kb.as_markup())
    await state.set_state(AddCourse.waiting_for_category)


@dp.callback_query(F.data.startswith("coursecat_"))
async def course_category(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[1])
    data = await state.get_data()
    await db.add_course(
        data["title"], data["description"], data["price"], data["link"], category_id
    )
    await callback.message.answer("–ö—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ", reply_markup=main_menu(True))
    await state.clear()


# === –û—Ç–º–µ–Ω–∞ ===
@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_any(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(message.from_user.id == ADMIN_ID))


# === MAIN ===
async def main():
    await db.init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())


