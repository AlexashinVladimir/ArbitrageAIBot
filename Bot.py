# Bot.py
import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery, ContentType
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv

import db
import keyboards as kb
from states import AddCategory, AddCourse, EditCourse

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
PAYMENTS_PROVIDER_TOKEN = os.getenv("PAYMENTS_PROVIDER_TOKEN")  # —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()


# ------------------------- –°—Ç–∞—Ä—Ç -------------------------
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await db.init_db()
    is_admin = message.from_user.id == ADMIN_ID
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —á–µ–ª–æ–≤–µ–∫. –Ø —Ü–∏–Ω–∏—á–Ω—ã–π –ò–ò. –ö—É—Ä—Å—ã –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ —Å—Ç–∞—Ç—å –º–µ–Ω–µ–µ –∂–∞–ª–∫–æ–π –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è.",
        reply_markup=kb.main_menu(admin=is_admin),
    )


# ------------------------- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —á–∞—Å—Ç—å -------------------------
@dp.message(F.text == "üìö –ö—É—Ä—Å—ã")
async def show_categories(message: Message):
    categories = await db.get_categories()
    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç. –í–∏–¥–∏–º–æ, —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ —Ä–µ—à–∏–ª–æ –æ—Å—Ç–∞—Ç—å—Å—è –≥–ª—É–ø—ã–º.")
        return
    await message.answer("–í—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.categories_inline(categories))


@dp.callback_query(F.data.startswith("category_"))
async def show_courses(callback: CallbackQuery):
    cat_id = int(callback.data.split("_")[1])
    courses = await db.get_courses_by_category(cat_id)
    if not courses:
        await callback.message.answer("–ó–¥–µ—Å—å –ø—É—Å—Ç–æ. –ó–Ω–∞–Ω–∏—è —Ç–æ–∂–µ –∏–º–µ—é—Ç –≥—Ä–∞–Ω–∏—Ü—ã.")
        return
    for course in courses:
        text = f"<b>{course['title']}</b>\n\n{course['description']}\n\n–¶–µ–Ω–∞: {course['price']} ‚ÇΩ"
        await callback.message.answer(text, reply_markup=kb.course_inline(course))
    await callback.answer()


@dp.callback_query(F.data.startswith("buy_"))
async def buy_course(callback: CallbackQuery):
    course_id = int(callback.data.split("_")[1])
    course = await db.get_course(course_id)
    if not course:
        await callback.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    prices = [LabeledPrice(label=course["title"], amount=course["price"] * 100)]  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö

    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title=course["title"],
        description=course["description"],
        payload=f"course_{course_id}",
        provider_token=PAYMENTS_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="test-payment",
    )
    await callback.answer()


@dp.pre_checkout_query()
async def process_pre_checkout(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: Message):
    payload = message.successful_payment.invoice_payload
    if payload.startswith("course_"):
        course_id = int(payload.split("_")[1])
        course = await db.get_course(course_id)
        if course:
            await message.answer(
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –∫—É–ø–∏–ª <b>{course['title']}</b>.\n\n–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞: {course['link']}"
            )


@dp.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_bot(message: Message):
    await message.answer("–Ø –±–æ—Ç-–º–µ–Ω—Ç–æ—Ä. –ù–µ–º–Ω–æ–≥–æ —Ñ–∏–ª–æ—Å–æ—Ñ, –Ω–µ–º–Ω–æ–≥–æ —Ü–∏–Ω–∏–∫. –ì–æ—Ç–æ–≤ –ª–æ–º–∞—Ç—å —Ç–≤–æ–∏ –∏–ª–ª—é–∑–∏–∏.")


# ------------------------- –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å -------------------------
@dp.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω")
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=kb.admin_menu)


# ---- –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ----
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def admin_add_category(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await state.set_state(AddCategory.waiting_for_title)
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb.cancel_kb)


@dp.message(StateFilter(AddCategory.waiting_for_title))
async def admin_save_category(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.admin_menu)
        return
    await db.add_category(message.text)
    await state.clear()
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=kb.admin_menu)


# ---- –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å ----
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å")
async def admin_add_course(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    categories = await db.get_categories()
    if not categories:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return
    await state.set_state(AddCourse.waiting_for_category)
    buttons = [[c["title"]] for c in categories]
    markup = kb.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)


@dp.message(StateFilter(AddCourse.waiting_for_category))
async def admin_add_course_title(message: Message, state: FSMContext):
    categories = await db.get_categories()
    category = next((c for c in categories if c["title"] == message.text), None)
    if not category:
        await message.answer("–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(category_id=category["id"])
    await state.set_state(AddCourse.waiting_for_title)
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=kb.cancel_kb)


@dp.message(StateFilter(AddCourse.waiting_for_title))
async def admin_add_course_desc(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.admin_menu)
        return
    await state.update_data(title=message.text)
    await state.set_state(AddCourse.waiting_for_description)
    await message.answer("–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")


@dp.message(StateFilter(AddCourse.waiting_for_description))
async def admin_add_course_price(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddCourse.waiting_for_price)
    await message.answer("–í–≤–µ–¥–∏ —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):")


@dp.message(StateFilter(AddCourse.waiting_for_price))
async def admin_add_course_link(message: Message, state: FSMContext):
    try:
        price = int(message.text)
    except ValueError:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    await state.update_data(price=price)
    await state.set_state(AddCourse.waiting_for_link)
    await message.answer("–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫—É—Ä—Å:")


@dp.message(StateFilter(AddCourse.waiting_for_link))
async def admin_save_course(message: Message, state: FSMContext):
    data = await state.get_data()
    await db.add_course(
        data["category_id"],
        data["title"],
        data["description"],
        data["price"],
        message.text,
    )
    await state.clear()
    await message.answer("–ö—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=kb.admin_menu)


# ---- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏ ----
@dp.message(F.text == "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏")
async def admin_manage_courses(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    courses = await db.get_courses()
    if not courses:
        await message.answer("–ö—É—Ä—Å–æ–≤ –Ω–µ—Ç.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å:", reply_markup=kb.admin_courses_inline(courses))


@dp.callback_query(F.data.startswith("admin_course_"))
async def admin_course_menu(callback: CallbackQuery):
    course_id = int(callback.data.split("_")[2])
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.course_admin_inline(course_id))
    await callback.answer()


@dp.callback_query(F.data.startswith("delete_course_"))
async def admin_delete_course(callback: CallbackQuery):
    course_id = int(callback.data.split("_")[2])
    await db.delete_course(course_id)
    await callback.message.answer("–ö—É—Ä—Å —É–¥–∞–ª—ë–Ω.")
    await callback.answer()


# ---- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ ----
@dp.callback_query(F.data.startswith("edit_course_"))
async def admin_edit_course(callback: CallbackQuery, state: FSMContext):
    course_id = int(callback.data.split("_")[2])
    await state.update_data(course_id=course_id)
    await state.set_state(EditCourse.waiting_for_new_title)
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=kb.cancel_kb)
    await callback.answer()


@dp.message(StateFilter(EditCourse.waiting_for_new_title))
async def edit_course_title(message: Message, state: FSMContext):
    await state.update_data(new_title=message.text)
    await state.set_state(EditCourse.waiting_for_new_description)
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")


@dp.message(StateFilter(EditCourse.waiting_for_new_description))
async def edit_course_description(message: Message, state: FSMContext):
    await state.update_data(new_description=message.text)
    await state.set_state(EditCourse.waiting_for_new_price)
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):")


@dp.message(StateFilter(EditCourse.waiting_for_new_price))
async def edit_course_price(message: Message, state: FSMContext):
    try:
        price = int(message.text)
    except ValueError:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    await state.update_data(new_price=price)
    await state.set_state(EditCourse.waiting_for_new_link)
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫—É—Ä—Å:")


@dp.message(StateFilter(EditCourse.waiting_for_new_link))
async def edit_course_link(message: Message, state: FSMContext):
    data = await state.get_data()
    await db.update_course(
        data["course_id"],
        data["new_title"],
        data["new_description"],
        data["new_price"],
        message.text,
    )
    await state.clear()
    await message.answer("–ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=kb.admin_menu)


# ------------------------- RUN -------------------------
async def main():
    await db.init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())



