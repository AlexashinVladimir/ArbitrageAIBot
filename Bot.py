import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from dotenv import load_dotenv

import keyboards as kb
import db

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN")

# FSM –∫–ª–∞—Å—Å—ã
class AddCategory(StatesGroup):
    name = State()

class AddCourse(StatesGroup):
    category = State()
    title = State()
    description = State()
    price = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN, default=ParseMode.HTML)
dp = Dispatcher()

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(Command("start"))
async def cmd_start(message: Message):
    is_admin = message.from_user.id == ADMIN_ID
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.main_menu(is_admin)
    )

# --- –û –±–æ—Ç–µ ---
@dp.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about(message: Message):
    await message.answer(
        "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å –æ–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã.\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫—É—Ä—Å—ã."
    )

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π ---
@dp.message(F.text == "üìö –ö—É—Ä—Å—ã")
async def show_categories(message: Message):
    categories = await db.get_categories()
    if not categories:
        await message.answer("‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        return
    await message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.categories_keyboard(categories))

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—Å–æ–≤ ---
@dp.callback_query(F.data.startswith("category:"))
async def show_courses(callback: CallbackQuery):
    category_id = int(callback.data.split(":")[1])
    courses = await db.get_courses_by_category(category_id)
    if not courses:
        await callback.message.edit_text("‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤.")
        return
    for course in courses:
        text = f"<b>{course['title']}</b>\n\n{course['description']}"
        await callback.message.answer(
            text,
            reply_markup=kb.buy_course_keyboard(course["id"], course["price"])
        )
    await callback.answer()

# --- –ü–æ–∫—É–ø–∫–∞ –∫—É—Ä—Å–∞ ---
@dp.callback_query(F.data.startswith("buy:"))
async def buy_course(callback: CallbackQuery):
    course_id = int(callback.data.split(":")[1])
    course = await db.get_course(course_id)
    if not course:
        await callback.answer("‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title=course["title"],
        description=course["description"],
        payload=f"course_{course_id}",
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="RUB",
        prices=[LabeledPrice(label=course["title"], amount=course["price"] * 100)],
        start_parameter="purchase",
    )
    await callback.answer()

@dp.pre_checkout_query()
async def pre_checkout(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message(F.successful_payment)
async def successful_payment(message: Message):
    await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –æ—Ç–∫—Ä—ã—Ç.")

# ================== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ==================

@dp.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb.admin_panel())

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
@dp.callback_query(F.data == "add_category")
async def add_category_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb.cancel_keyboard())
    await state.set_state(AddCategory.name)
    await callback.answer()

@dp.message(StateFilter(AddCategory.name))
async def add_category_name(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main_menu(True))
        return
    await db.add_category(message.text)
    await state.clear()
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{message.text}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=kb.main_menu(True))

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ ---
@dp.callback_query(F.data == "add_course")
async def add_course_start(callback: CallbackQuery, state: FSMContext):
    categories = await db.get_categories()
    if not categories:
        await callback.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.", reply_markup=kb.main_menu(True))
        return
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.categories_keyboard(categories))
    await state.set_state(AddCourse.category)
    await callback.answer()

@dp.callback_query(StateFilter(AddCourse.category), F.data.startswith("category:"))
async def add_course_choose_category(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split(":")[1])
    await state.update_data(category_id=category_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=kb.cancel_keyboard())
    await state.set_state(AddCourse.title)
    await callback.answer()

@dp.message(StateFilter(AddCourse.title))
async def add_course_title(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main_menu(True))
        return
    await state.update_data(title=message.text)
    await state.set_state(AddCourse.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=kb.cancel_keyboard())

@dp.message(StateFilter(AddCourse.description))
async def add_course_description(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main_menu(True))
        return
    await state.update_data(description=message.text)
    await state.set_state(AddCourse.price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫—É—Ä—Å–∞ (–≤ ‚ÇΩ):", reply_markup=kb.cancel_keyboard())

@dp.message(StateFilter(AddCourse.price))
async def add_course_price(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main_menu(True))
        return
    try:
        price = int(message.text)
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (—Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö).")
        return

    data = await state.get_data()
    await db.add_course(
        data["category_id"], data["title"], data["description"], price
    )
    await state.clear()
    await message.answer(
        f"‚úÖ –ö—É—Ä—Å <b>{data['title']}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!",
        reply_markup=kb.main_menu(True)
    )

# --- –û—Ç–º–µ–Ω–∞ –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ---
@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_any(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main_menu(message.from_user.id == ADMIN_ID))

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


