import os, random, asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery, CallbackQuery
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import db, keyboards as kb, texts, states

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN")
CURRENCY = os.getenv("CURRENCY", "RUB")

bot = Bot(BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
asyncio.run(db.init_db())

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(texts.START_TEXT, reply_markup=kb.main_menu_kb())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ—Ç–º–µ–Ω–∞
@dp.message(F.text.in_(["‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚ùå –û—Ç–º–µ–Ω–∞"]))
async def back_to_main(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.main_menu_kb())

# –ö—É—Ä—Å—ã
@dp.message(F.text == "üìö –ö—É—Ä—Å—ã")
async def show_categories(message: Message):
    categories = await db.list_categories()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.category_kb(categories))

@dp.callback_query(lambda c: c.data.startswith("user_cat:"))
async def choose_category_user(cb: CallbackQuery):
    cat_id = int(cb.data.split(":")[1])
    courses = await db.list_courses_by_category(cat_id)
    if not courses:
        await cb.message.answer("–ö—É—Ä—Å—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=kb.course_kb([]))
        return
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=kb.course_kb(courses))

@dp.callback_query(lambda c: c.data.startswith("course:"))
async def course_details(cb: CallbackQuery):
    course_id = int(cb.data.split(":")[1])
    course = await db.get_course(course_id)
    if not course:
        await cb.message.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    ai_comment = random.choice(texts.AI_RECOMMENDATION)
    text = f"<b>{course[2]}</b>\n{course[3]}\nüí∞ –¶–µ–Ω–∞: {course[4]} ‚ÇΩ\n\n{ai_comment}"
    await cb.message.answer(text, parse_mode=ParseMode.HTML, reply_markup=kb.pay_kb(course_id))

# –û–ø–ª–∞—Ç–∞
@dp.callback_query(lambda c: c.data.startswith("pay:"))
async def pay_course(cb: CallbackQuery):
    course_id = int(cb.data.split(":")[1])
    course = await db.get_course(course_id)
    if not course:
        await cb.message.answer("–û—à–∏–±–∫–∞: –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    prices = [LabeledPrice(label=course[2], amount=int(course[4])*100)]
    await bot.send_invoice(
        chat_id=cb.from_user.id,
        title=course[2],
        description=course[3],
        provider_token=PROVIDER_TOKEN,
        currency=CURRENCY,
        prices=prices,
        payload=str(course_id)
    )

@dp.pre_checkout_query()
async def checkout(pre_checkout: PreCheckoutQuery):
    await pre_checkout.answer(ok=True)

@dp.message(F.content_type == "successful_payment")
async def got_payment(message: Message):
    course_id = int(message.successful_payment.invoice_payload)
    await db.add_purchase(
        user_id=message.from_user.id,
        course_id=course_id,
        amount=message.successful_payment.total_amount//100,
        currency=message.successful_payment.currency,
        telegram_charge_id=message.successful_payment.telegram_payment_charge_id,
        provider_charge_id=message.successful_payment.provider_payment_charge_id
    )
    course = await db.get_course(course_id)
    await message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! –°—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å: {course[5]}")

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò
@dp.message(F.text == "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò")
async def ai_recommendation(message: Message):
    await message.answer(random.choice(texts.AI_RECOMMENDATION))

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.message(F.text == "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    await message.answer(texts.ADMIN_TEXT, reply_markup=kb.admin_kb())

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –∫—É—Ä—Å–∞–º–∏, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
# ... (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ FSM, –∫–∞–∫ –º—ã –¥–µ–ª–∞–ª–∏ —Ä–∞–Ω—å—à–µ, —Å kb.cancel_kb() –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ)
# –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –≤ —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø–æ–ª–Ω—ã–π FSM –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∫—É—Ä—Å–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ.

# –ó–∞–ø—É—Å–∫ polling
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ polling...")
    asyncio.run(dp.start_polling(bot))




