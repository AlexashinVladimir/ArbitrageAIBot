"""
Bot.py ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞.
–ü–æ–¥–¥–µ—Ä–∂–∫–∞: Aiogram 3.6+, SQLite (—á–µ—Ä–µ–∑ aiosqlite), Polling, Telegram Payments.
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤: –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ü–µ–Ω–∞.
–ó–∞–ø—É—Å–∫: python Bot.py
"""

import asyncio
import logging
import os
import secrets
from datetime import datetime
from typing import Optional

from dotenv import load_dotenv
import aiosqlite

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, Text
from aiogram.types import LabeledPrice, PreCheckoutQuery, ContentType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# –ú–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ (—Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å: db.py, keyboards.py, texts.py, states.py)
import db
import keyboards as kb
import texts
from states import AddCategory, AddCourse, EditCourse

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', '0'))
PAYMENT_PROVIDER_TOKEN = os.getenv('PAYMENT_PROVIDER_TOKEN')
CURRENCY = os.getenv('CURRENCY', 'RUB')
DB_PATH = os.getenv('DB_PATH', 'data.db')

if not TOKEN:
    raise RuntimeError("TOKEN is not set in .env")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ –ø–∞–º—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot = Bot(token=TOKEN, parse_mode='HTML')
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# -------------------- Startup --------------------
async def on_startup():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.init_db(DB_PATH)
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∞–¥–º–∏–Ω –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if ADMIN_ID:
        await db.ensure_user(ADMIN_ID, is_admin=True)
    logger.info("Startup completed.")


# -------------------- –ö–æ–º–∞–Ω–¥—ã / –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π --------------------
@dp.message.register(Command("start"))
async def cmd_start(message: types.Message):
    """–°—Ç–∞—Ä—Ç ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await db.ensure_user(message.from_user.id)
    await message.answer(texts.START, reply_markup=kb.main_menu())


@dp.message.register(Text("‚ÑπÔ∏è –û –±–æ—Ç–µ"))
async def about_handler(message: types.Message):
    await message.answer(texts.ABOUT)


@dp.message.register(Text("üìö –ö—É—Ä—Å—ã"))
async def show_categories(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ (active) –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    categories = await db.list_categories(active_only=True)
    if not categories:
        await message.answer(texts.CATEGORY_EMPTY)
        return
    # Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.categories_inline(categories))


@dp.callback_query.register(lambda c: c.data and c.data.startswith("category:"))
async def category_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    await callback.answer()
    cat_id = int(callback.data.split(":", 1)[1])
    courses = await db.list_courses_by_category(cat_id)
    if not courses:
        await callback.message.answer(texts.COURSE_EMPTY)
        return
    await callback.message.answer("–ö—É—Ä—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb.courses_inline(courses))


@dp.callback_query.register(lambda c: c.data and c.data.startswith("course_show:"))
async def course_show_cb(cb: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ."""
    await cb.answer()
    course_id = int(cb.data.split(":", 1)[1])
    course = await db.get_course(course_id)
    if not course:
        await cb.message.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    text = f"<b>{course['title']}</b>\n{course['description'] or ''}\n–¶–µ–Ω–∞: {course['price'] / 100:.2f} {course['currency']}"
    await cb.message.answer(text, reply_markup=kb.course_detail_inline(course))


# -------------------- –û–ø–ª–∞—Ç–∞ --------------------
@dp.callback_query.register(lambda c: c.data and c.data.startswith("course_pay:"))
async def course_pay_cb(cb: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ –æ–ø–ª–∞—Ç—ã ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—á–µ—Ç–∞ (invoice)."""
    await cb.answer()
    payload = cb.data.split(":", 1)[1]
    course = await db.get_course_by_payload(payload)
    if not course:
        await cb.message.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    title = course["title"]
    description = course["description"] or title

    # –°—É–º–º–∞ ‚Äî –≤ –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö (–∫–æ–ø–µ–π–∫–∏ –¥–ª—è RUB)
    price_value = int(course["price"])
    labeled_price = [LabeledPrice(label=title, amount=price_value)]

    # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π payload (—Å–¥–µ–ª–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫ id –∫—É—Ä—Å–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
    invoice_payload = f"course_{course['id']}_{secrets.token_hex(6)}"

    await bot.send_invoice(
        chat_id=cb.from_user.id,
        title=title,
        description=description,
        payload=invoice_payload,
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency=course["currency"],
        prices=labeled_price,
        start_parameter=f"buy_{course['id']}",
    )


@dp.pre_checkout_query.register()
async def pre_checkout(query: PreCheckoutQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ pre-checkout (–≤—Å–µ–≥–¥–∞ –û–ö –≤ —ç—Ç–æ–º –¥–µ–º–æ)."""
    await query.answer(ok=True)


@dp.message.register(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.
    –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∫—É—Ä—Å –ø–æ payload (–≤ invoice.payload –º—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–ª–æ–∂–∏–ª–∏ 'course_{id}_...').
    """
    pay = message.successful_payment
    payload = pay.invoice_payload
    course = None

    # –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç–∞—Ç—å id –∫—É—Ä—Å–∞ –∏–∑ payload
    if payload and payload.startswith("course_"):
        try:
            course_id = int(payload.split("_")[1])
            course = await db.get_course(course_id)
        except Exception:
            course = None

    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –ø–æ–ø—ã—Ç–∞–µ–º—Å—è —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ —Å—É–º–º–µ –∏ –≤–∞–ª—é—Ç–µ (fallback)
    if not course:
        async with aiosqlite.connect(DB_PATH) as conn:
            conn.row_factory = aiosqlite.Row
            cur = await conn.execute("SELECT * FROM courses")
            rows = await cur.fetchall()
            for r in rows:
                if int(r["price"]) == int(pay.total_amount) and r["currency"] == pay.currency:
                    course = dict(r)
                    break

    if not course:
        await message.answer("–ü–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫—É—Ä—Å. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    # –ó–∞–ø–∏—Å—å –ø–æ–∫—É–ø–∫–∏ –≤ –ë–î
    user_db_id = await db.ensure_user(message.from_user.id)
    await db.record_purchase(user_db_id, course["id"], datetime.utcnow().isoformat(), payload)

    # –û—Ç–ø—Ä–∞–≤–∏–º –¥–æ—Å—Ç—É–ø (–≤ –¥–µ–º–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ)
    await message.answer(texts.COURSE_PURCHASED.format(title=course["title"]))
    await message.answer(f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞:\n{course['description'] or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'}")


# -------------------- Admin: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏ (—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º) --------------------
@dp.message.register(Text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏"))
async def admin_manage_courses(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è/–¥–æ–±–∞–≤–ª–µ–Ω–∏—è."""
    if message.from_user.id != ADMIN_ID:
        await message.answer(texts.ADMIN_ONLY)
        return

    async with aiosqlite.connect(DB_PATH) as conn:
        conn.row_factory = aiosqlite.Row
        cur = await conn.execute("SELECT * FROM courses ORDER BY id")
        rows = await cur.fetchall()
        courses = [dict(r) for r in rows]

    if not courses:
        await message.answer("–ö—É—Ä—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    await message.answer("–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ (–¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è):", reply_markup=kb.admin_courses_inline(courses))


@dp.callback_query.register(lambda c: c.data and c.data.startswith("admin_course:"))
async def admin_course_cb(cb: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å)."""
    await cb.answer()
    if cb.from_user.id != ADMIN_ID:
        await cb.message.answer(texts.ADMIN_ONLY)
        return

    course_id = int(cb.data.split(":", 1)[1])
    course = await db.get_course(course_id)
    if not course:
        await cb.message.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    text = f"–ö—É—Ä—Å: {course['title']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {course['description'] or '-'}\n–¶–µ–Ω–∞: {course['price'] / 100:.2f} {course['currency']}"
    inline = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_course_edit:{course_id}")
        ],
        [
            types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_course_delete:{course_id}")
        ],
        [
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")
        ]
    ])
    await cb.message.answer(text, reply_markup=inline)


@dp.callback_query.register(lambda c: c.data and c.data.startswith("admin_course_delete:"))
async def admin_course_delete(cb: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ (admin)."""
    await cb.answer()
    if cb.from_user.id != ADMIN_ID:
        await cb.message.answer(texts.ADMIN_ONLY)
        return

    course_id = int(cb.data.split(":", 1)[1])
    await db.delete_course(course_id)
    await cb.message.answer("–ö—É—Ä—Å —É–¥–∞–ª—ë–Ω.")


# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—è ---
@dp.callback_query.register(lambda c: c.data and c.data.startswith("admin_course_edit:"))
async def admin_course_edit_start(cb: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:
    –≤–∞—Ä–∏–∞–Ω—Ç—ã: title, description (—Å—Å—ã–ª–∫–∏), price.
    """
    await cb.answer()
    if cb.from_user.id != ADMIN_ID:
        await cb.message.answer(texts.ADMIN_ONLY)
        return

    course_id = int(cb.data.split(":", 1)[1])
    course = await db.get_course(course_id)
    if not course:
        await cb.message.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ó–∞–ø–æ–º–Ω–∏–º id –∫—É—Ä—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.set_state(EditCourse.waiting_for_field)
    await state.update_data(course_id=course_id)

    # –ü—Ä–µ–¥–ª–æ–∂–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    inline = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field:title"),
            types.InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ / –°—Å—ã–ª–∫–∞", callback_data="edit_field:description")
        ],
        [
            types.InlineKeyboardButton(text="–¶–µ–Ω–∞ (RUB)", callback_data="edit_field:price")
        ],
        [
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")
        ]
    ])
    await cb.message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=inline)


@dp.callback_query.register(lambda c: c.data and c.data.startswith("edit_field:"))
async def admin_course_edit_field(cb: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    await cb.answer()
    if cb.from_user.id != ADMIN_ID:
        await cb.message.answer(texts.ADMIN_ONLY)
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –º—ã –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º)
    field = cb.data.split(":", 1)[1]
    data = await state.get_data()
    if not data or "course_id" not in data:
        await cb.message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω –∫—É—Ä—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –∏ –ø–µ—Ä–µ–π–¥—ë–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    await state.update_data(edit_field=field)
    await state.set_state(EditCourse.waiting_for_value)

    if field == "title":
        await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫—É—Ä—Å–∞ (–∏–ª–∏ ‚ùå –û—Ç–º–µ–Ω–∞):")
    elif field == "description":
        await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ / —Å—Å—ã–ª–∫—É –¥–ª—è –∫—É—Ä—Å–∞ (–∏–ª–∏ ‚ùå –û—Ç–º–µ–Ω–∞):")
    elif field == "price":
        await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (–ø—Ä–∏–º–µ—Ä: 499.99) (–∏–ª–∏ ‚ùå –û—Ç–º–µ–Ω–∞):")
    else:
        await cb.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ.")
        await state.clear()


@dp.message.register(state=EditCourse.waiting_for_value)
async def admin_course_edit_value(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î."""
    # –û—Ç–º–µ–Ω–∞
    if message.text.strip() == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(texts.CANCELLED, reply_markup=kb.main_menu())
        return

    data = await state.get_data()
    course_id: Optional[int] = data.get("course_id")
    field: Optional[str] = data.get("edit_field")

    if not course_id or not field:
        await state.clear()
        await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=kb.main_menu())
        return

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
    try:
        if field == "title":
            new_title = message.text.strip()
            if not new_title:
                await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return
            await db.update_course(course_id, title=new_title)
            await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: <b>{new_title}</b>", reply_markup=kb.main_menu())

        elif field == "description":
            new_desc = message.text.strip()
            await db.update_course(course_id, description=new_desc)
            await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=kb.main_menu())

        elif field == "price":
            # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ø–µ–π–∫–∏
            try:
                value = float(message.text.replace(",", "."))
                amount = int(round(value * 100))
                if amount <= 0:
                    raise ValueError()
            except Exception:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 499.99")
                return
            await db.update_course(course_id, price=amount)
            await message.answer(f"–¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {amount / 100:.2f} {CURRENCY}", reply_markup=kb.main_menu())

        else:
            await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    except Exception as exc:
        logger.exception("Error updating course: %s", exc)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.clear()


# -------------------- Admin: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ --------------------
@dp.message.register(Text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"))
async def admin_manage_categories(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer(texts.ADMIN_ONLY)
        return
    categories = await db.list_categories(active_only=False)
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:", reply_markup=kb.admin_categories_inline(categories))


@dp.callback_query.register(lambda c: c.data and c.data.startswith("admin_cat:"))
async def admin_cat_cb(cb: types.CallbackQuery):
    await cb.answer()
    if cb.from_user.id != ADMIN_ID:
        await cb.message.answer(texts.ADMIN_ONLY)
        return
    cat_id = int(cb.data.split(":", 1)[1])
    cat = await db.get_category(cat_id)
    if not cat:
        await cb.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    text = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat['title']}\n–ê–∫—Ç–∏–≤–Ω–∞: {bool(cat['is_active'])}"
    inline = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data=f"admin_cat_toggle:{cat_id}")],
        [types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_cat_delete:{cat_id}")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")]
    ])
    await cb.message.answer(text, reply_markup=inline)


@dp.callback_query.register(lambda c: c.data and c.data.startswith("admin_cat_toggle:"))
async def admin_cat_toggle(cb: types.CallbackQuery):
    await cb.answer()
    if cb.from_user.id != ADMIN_ID:
        await cb.message.answer(texts.ADMIN_ONLY)
        return
    cat_id = int(cb.data.split(":", 1)[1])
    cat = await db.get_category(cat_id)
    if not cat:
        await cb.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    await db.set_category_active(cat_id, not bool(cat["is_active"]))
    await cb.message.answer("–°—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª—ë–Ω.")


@dp.callback_query.register(lambda c: c.data and c.data.startswith("admin_cat_delete:"))
async def admin_cat_delete(cb: types.CallbackQuery):
    await cb.answer()
    if cb.from_user.id != ADMIN_ID:
        await cb.message.answer(texts.ADMIN_ONLY)
        return
    cat_id = int(cb.data.split(":", 1)[1])
    await db.delete_category(cat_id)
    await cb.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞.")


@dp.callback_query.register(lambda c: c.data == "admin_cat_add")
async def admin_cat_add_cb(cb: types.CallbackQuery):
    await cb.answer()
    if cb.from_user.id != ADMIN_ID:
        await cb.message.answer(texts.ADMIN_ONLY)
        return
    await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await AddCategory.waiting_for_title.set()


@dp.message.register(state=AddCategory.waiting_for_title)
async def add_category_title(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(texts.CANCELLED, reply_markup=kb.main_menu())
        return
    title = message.text.strip()
    cid = await db.add_category(title)
    await state.clear()
    await message.answer(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{title}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å id {cid}.', reply_markup=kb.main_menu())


# -------------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ (admin) --------------------
@dp.callback_query.register(lambda c: c.data == "admin_course_add")
async def admin_course_add_cb(cb: types.CallbackQuery):
    await cb.answer()
    if cb.from_user.id != ADMIN_ID:
        await cb.message.answer(texts.ADMIN_ONLY)
        return
    cats = await db.list_categories(active_only=False)
    if not cats:
        await cb.message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
        return
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø–∏—à–∏—Ç–µ id):\n" + "\n".join([f"{c['id']}: {c['title']}" for c in cats]))
    await AddCourse.waiting_for_category.set()


@dp.message.register(state=AddCourse.waiting_for_category)
async def add_course_category(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(texts.CANCELLED, reply_markup=kb.main_menu())
        return
    try:
        cat_id = int(message.text.strip())
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π id. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return
    cat = await db.get_category(cat_id)
    if not cat:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    await state.update_data(category_id=cat_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫—É—Ä—Å–∞:")
    await AddCourse.waiting_for_title.set()


@dp.message.register(state=AddCourse.waiting_for_title)
async def add_course_title(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(texts.CANCELLED, reply_markup=kb.main_menu())
        return
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")
    await AddCourse.waiting_for_description.set()


@dp.message.register(state=AddCourse.waiting_for_description)
async def add_course_description(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(texts.CANCELLED, reply_markup=kb.main_menu())
        return
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 499.99):")
    await AddCourse.waiting_for_price.set()


@dp.message.register(state=AddCourse.waiting_for_price)
async def add_course_price(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(texts.CANCELLED, reply_markup=kb.main_menu())
        return
    try:
        value = float(message.text.replace(",", "."))
        amount = int(round(value * 100))
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∏–º–µ—Ä: 499.99")
        return
    data = await state.get_data()
    category_id = data["category_id"]
    title = data["title"]
    description = data["description"]
    payload = f"payload_{secrets.token_hex(8)}"
    cid = await db.add_course(category_id, title, description, amount, CURRENCY, payload)
    await state.clear()
    await message.answer(f'–ö—É—Ä—Å "{title}" –¥–æ–±–∞–≤–ª–µ–Ω —Å id {cid}.', reply_markup=kb.main_menu())


# -------------------- –û—Ç–º–µ–Ω–∞ –∏ fallback --------------------
@dp.callback_query.register(lambda c: c.data == "admin_cancel")
async def admin_cancel_cb(cb: types.CallbackQuery, state: FSMContext):
    await cb.answer()
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    try:
        await cb.message.delete_reply_markup()
    except Exception:
        pass
    await state.clear()
    await cb.message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main_menu())


@dp.message.register(Text("‚ùå –û—Ç–º–µ–Ω–∞"))
async def cancel_by_text(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(texts.CANCELLED, reply_markup=kb.main_menu())


@dp.message.register()
async def fallback(message: types.Message):
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.main_menu())


# -------------------- Run --------------------
async def main():
    await on_startup()
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())







