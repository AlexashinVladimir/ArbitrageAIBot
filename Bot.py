import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

import db
import keyboards as kb

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
PAYMENT_PROVIDER = os.getenv("PAYMENT_PROVIDER")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())


# FSM –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
class CategoryStates(StatesGroup):
    waiting_for_title = State()


# FSM –¥–ª—è –∫—É—Ä—Å–æ–≤
class CourseStates(StatesGroup):
    waiting_for_category = State()
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_link = State()


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    is_admin = message.from_user.id == ADMIN_ID
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç—Ç–æ—Ç —Å–ª–µ–≥–∫–∞ —Ü–∏–Ω–∏—á–Ω—ã–π, –Ω–æ –º—É–¥—Ä—ã–π —É–≥–æ–ª–æ–∫ –ò–ò.\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫—É—Ä—Å—ã –∏–ª–∏ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–±–æ –º–Ω–µ.",
        reply_markup=kb.main_menu(is_admin=is_admin),
    )


# –û –±–æ—Ç–µ
@dp.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_bot(message: Message):
    await message.answer(
        "–Ø ‚Äî —Ç–≤–æ–π —Ü–∏–Ω–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. "
        "–ù–µ –æ–±–µ—â–∞—é, —á—Ç–æ –±—É–¥–µ—Ç –ª–µ–≥–∫–æ. –ù–æ –æ–±–µ—â–∞—é, —á—Ç–æ –±—É–¥–µ—Ç —á–µ—Å—Ç–Ω–æ."
    )


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ ---
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def add_category(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb.cancel())
    await state.set_state(CategoryStates.waiting_for_title)


@dp.message(CategoryStates.waiting_for_title)
async def save_category(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.admin_panel())
        return
    await db.add_category(message.text)
    await state.clear()
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{message.text}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=kb.admin_panel())


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏ ---
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å")
async def add_course(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    categories = await db.get_categories()
    if not categories:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.", reply_markup=kb.admin_panel())
        return
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.categories_inline(categories))
    await state.set_state(CourseStates.waiting_for_category)


@dp.callback_query(CourseStates.waiting_for_category)
async def course_set_category(callback: CallbackQuery, state: FSMContext):
    await state.update_data(category_id=int(callback.data.split("_")[1]))
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=kb.cancel())
    await state.set_state(CourseStates.waiting_for_title)


@dp.message(CourseStates.waiting_for_title)
async def course_set_title(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.admin_panel())
        return
    await state.update_data(title=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=kb.cancel())
    await state.set_state(CourseStates.waiting_for_description)


@dp.message(CourseStates.waiting_for_description)
async def course_set_description(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.admin_panel())
        return
    await state.update_data(description=message.text)
    await message.answer("–£–∫–∞–∂–∏ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:", reply_markup=kb.cancel())
    await state.set_state(CourseStates.waiting_for_price)


@dp.message(CourseStates.waiting_for_price)
async def course_set_price(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.admin_panel())
        return
    try:
        price = int(message.text)
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã.")
        return
    await state.update_data(price=price)
    await message.answer("–í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫—É—Ä—Å:", reply_markup=kb.cancel())
    await state.set_state(CourseStates.waiting_for_link)


@dp.message(CourseStates.waiting_for_link)
async def course_set_link(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.admin_panel())
        return
    data = await state.get_data()
    await db.add_course(
        data["category_id"], data["title"], data["description"], data["price"], message.text
    )
    await state.clear()
    await message.answer(f"‚úÖ –ö—É—Ä—Å <b>{data['title']}</b> –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=kb.admin_panel())


# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∫—É—Ä—Å–æ–≤ ---
@dp.message(F.text == "üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def show_categories(message: Message):
    categories = await db.get_categories()
    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.categories_inline(categories))


@dp.callback_query(F.data.startswith("cat_"))
async def show_courses(callback: CallbackQuery):
    category_id = int(callback.data.split("_")[1])
    courses = await db.get_courses(category_id)
    if not courses:
        await callback.message.answer("‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤.")
        return
    await callback.message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:", reply_markup=kb.courses_inline(courses))


@dp.callback_query(F.data.startswith("course_"))
async def show_course(callback: CallbackQuery):
    course_id = int(callback.data.split("_")[1])
    course = await db.get_course(course_id)
    if not course:
        await callback.message.answer("‚ö†Ô∏è –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    text = f"<b>{course['title']}</b>\n\n{course['description']}\n\n–¶–µ–Ω–∞: {course['price']}‚ÇΩ"
    await callback.message.answer(
        text,
        reply_markup=kb.buy_course(course["id"], course["price"], course["title"]),
    )


# --- –û–ø–ª–∞—Ç–∞ ---
@dp.callback_query(F.data.startswith("buy_"))
async def process_payment(callback: CallbackQuery):
    _, course_id, price, title = callback.data.split("_", 3)
    prices = [LabeledPrice(label=title, amount=int(price) * 100)]
    await bot.send_invoice(
        callback.from_user.id,
        title=title,
        description="–î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É",
        provider_token=PAYMENT_PROVIDER,
        currency="rub",
        prices=prices,
        payload=f"course_{course_id}",
    )


@dp.pre_checkout_query()
async def pre_checkout(pre_checkout_q: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message(F.content_type == "successful_payment")
async def successful_payment(message: Message):
    payload = message.successful_payment.invoice_payload
    course_id = int(payload.split("_")[1])
    course = await db.get_course(course_id)
    await message.answer(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞: {course['link']}"
    )


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await db.init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())




