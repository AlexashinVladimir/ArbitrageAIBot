import os
from dotenv import load_dotenv
import random
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

import db
import keyboards as kb
import texts
import states

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN")

bot = Bot(BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ Bot.py –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
# (–≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ start, –∞–¥–º–∏–Ω–∫–∞, FSM, –æ–ø–ª–∞—Ç–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫—É—Ä—Å—ã)

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(texts.START_TEXT, reply_markup=kb.main_menu_kb())

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∫—É—Ä—Å–æ–≤ ---
@dp.message(F.text == "üìö –ö—É—Ä—Å—ã")
async def show_categories(message: Message):
    categories = await db.list_categories()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.category_kb(categories))

@dp.callback_query(lambda c: c.data.startswith("user_cat:"))
async def show_courses(cb: CallbackQuery):
    cat_id = int(cb.data.split(":")[1])
    courses = await db.list_courses_by_category(cat_id)
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=kb.course_kb(courses))

@dp.callback_query(lambda c: c.data.startswith("course:"))
async def course_details(cb: CallbackQuery):
    course_id = int(cb.data.split(":")[1])
    course = await db.get_course(course_id)
    if not course:
        await cb.message.edit_text("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    text = f"üìå {course[2]}\n\n{course[3]}\n\n–¶–µ–Ω–∞: {course[4]} {course[5]}"
    await cb.message.edit_text(text, reply_markup=kb.pay_kb(course_id))

# --- –û–ø–ª–∞—Ç–∞ Telegram ---
@dp.callback_query(lambda c: c.data.startswith("pay:"))
async def pay_course(cb: CallbackQuery):
    course_id = int(cb.data.split(":")[1])
    course = await db.get_course(course_id)
    await bot.send_invoice(
        cb.from_user.id,
        title=course[2],
        description=course[3],
        provider_token="–í–ê–®_–ü–†–û–í–ê–ô–î–ï–†_–¢–û–ö–ï–ù",
        currency=course[5],
        start_parameter="payment",
        payload=str(course_id),
        prices=[{"label": course[2], "amount": int(course[4]*100)}]
    )

@dp.message(F.content_type == "successful_payment")
async def payment_success(message: Message):
    course_id = int(message.successful_payment.invoice_payload)
    await db.add_payment(
        user_id=message.from_user.id,
        course_id=course_id,
        amount=message.successful_payment.total_amount/100,
        currency=message.successful_payment.currency,
        telegram_charge_id=message.successful_payment.telegram_payment_charge_id,
        provider_charge_id=message.successful_payment.provider_payment_charge_id
    )
    await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")

# --- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò ---
@dp.message(F.text == "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò")
async def ai_advice(message: Message):
    await message.answer(random.choice(texts.AI_RECOMMENDATION))

# --- –ê–¥–º–∏–Ω–∫–∞ ---
@dp.message(F.text == "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    await message.answer(texts.ADMIN_TEXT, reply_markup=kb.admin_kb())

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ ---
@dp.message(F.text == "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
async def manage_categories(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    categories = await db.list_categories()
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:", reply_markup=kb.admin_categories_kb(categories))

@dp.callback_query(lambda c: c.data.startswith("toggle_cat:"))
async def toggle_category(cb: CallbackQuery):
    cat_id = int(cb.data.split(":")[1])
    await db.toggle_category(cat_id)
    categories = await db.list_categories()
    await cb.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:", reply_markup=kb.admin_categories_kb(categories))

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏ ---
@dp.message(F.text == "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏")
async def manage_courses(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    courses = await db.list_all_courses()
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏:", reply_markup=kb.admin_courses_kb(courses))

@dp.callback_query(lambda c: c.data.startswith("toggle_course:"))
async def toggle_course(cb: CallbackQuery):
    course_id = int(cb.data.split(":")[1])
    await db.toggle_course(course_id)
    courses = await db.list_all_courses()
    await cb.message.edit_text("–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:", reply_markup=kb.admin_courses_kb(courses))

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def add_category_start(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await state.set_state(states.AddCategory.waiting_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb.cancel_kb())

@dp.message(states.AddCategory.waiting_name)
async def add_category_name(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb.admin_kb())
        return
    await db.add_category(message.text)
    await state.clear()
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=kb.admin_kb())

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ (FSM) ---
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å")
async def add_course_start(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    categories = await db.list_categories()
    active_cats = [c for c in categories if c[2]]
    if not active_cats:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        return
    await state.set_state(states.AddCourse.waiting_category)
    await state.update_data(categories=active_cats)
    kb_inline = kb.InlineKeyboardMarkup(
        inline_keyboard=[[kb.InlineKeyboardButton(c[1], callback_data=f"newcourse_cat:{c[0]}")] for c in active_cats]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞:", reply_markup=kb_inline)

@dp.callback_query(lambda c: c.data.startswith("newcourse_cat:"))
async def add_course_category(cb: CallbackQuery, state: FSMContext):
    cat_id = int(cb.data.split(":")[1])
    await state.update_data(category_id=cat_id)
    await state.set_state(states.AddCourse.waiting_title)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=kb.cancel_kb())

@dp.message(states.AddCourse.waiting_title)
async def add_course_title(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb.admin_kb())
        return
    await state.update_data(title=message.text)
    await state.set_state(states.AddCourse.waiting_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=kb.cancel_kb())

@dp.message(states.AddCourse.waiting_description)
async def add_course_description(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb.admin_kb())
        return
    await state.update_data(description=message.text)
    await state.set_state(states.AddCourse.waiting_price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫—É—Ä—Å–∞ (—á–∏—Å–ª–æ–º):", reply_markup=kb.cancel_kb())

@dp.message(states.AddCourse.waiting_price)
async def add_course_price(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb.admin_kb())
        return
    try:
        price = float(message.text)
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    await state.update_data(price=price)
    await state.set_state(states.AddCourse.waiting_link)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫—É—Ä—Å:", reply_markup=kb.cancel_kb())

@dp.message(states.AddCourse.waiting_link)
async def add_course_link(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb.admin_kb())
        return
    data = await state.get_data()
    await db.add_course(
        category_id=data['category_id'],
        title=data['title'],
        description=data['description'],
        price=data['price'],
        currency="RUB",
        link=message.text
    )
    await state.clear()
    await message.answer("–ö—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=kb.admin_kb())

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    import logging
    logging.basicConfig(level=logging.INFO)
    dp.run_polling(bot)






