# Bot.py ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ (Aiogram 3.6)
import asyncio
import logging
import os

from dotenv import load_dotenv
load_dotenv()

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode, ContentType
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import LabeledPrice, PreCheckoutQuery

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ (–±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–æ –æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É; —Ä—è–¥–æ–º —Å Bot.py)
import db
import keyboards as kb
import texts
from states import AddCategory, AddCourse, EditCourse

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥ –∏–∑ .env
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN")
if not PAYMENT_PROVIDER_TOKEN:
    # –ë–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –±–µ–∑ –ø–ª–∞—Ç–µ–∂–µ–π, –Ω–æ –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –æ–ø–ª–∞—Ç—É ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏ PAYMENT_PROVIDER_TOKEN.
    logger.warning("PAYMENT_PROVIDER_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env ‚Äî –ø–ª–∞—Ç–µ–∂–∏ –±—É–¥—É—Ç –Ω–µ—Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã.")

ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# ---------------------------
# Startup
# ---------------------------
async def on_startup():
    await db.init_db()  # —Å–æ–∑–¥–∞—Å—Ç —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞ –≤ users (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ db)
    if ADMIN_ID:
        try:
            await db.ensure_user(ADMIN_ID, is_admin=True)
        except Exception:
            # –µ—Å–ª–∏ –≤ db –Ω–µ—Ç ensure_user ‚Äî –æ–∫
            pass
    logger.info("Startup finished.")


# ---------------------------
# /start
# ---------------------------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    is_admin = (message.from_user.id == ADMIN_ID)
    # –ï—Å–ª–∏ –µ—Å—Ç—å texts.random_start(), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ; –∏–Ω–∞—á–µ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        text = texts.random_start()
    except Exception:
        text = "–ü—Ä–∏–≤–µ—Ç. –í—ã–±–∏—Ä–∞–π ‚Äî –∏–ª–∏ –æ—Å—Ç–∞–≤–∞–π—Å—è –ø—Ä–µ–∂–Ω–∏–º."
    await message.answer(text, reply_markup=kb.main_menu(is_admin))


# ---------------------------
# –û –±–æ—Ç–µ
# ---------------------------
@dp.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_bot(message: types.Message):
    try:
        await message.answer(texts.random_about())
    except Exception:
        await message.answer("–Ø ‚Äî —Ü–∏–Ω–∏—á–Ω—ã–π –ò–ò. –ü–æ–º–æ–≥–∞—é —Å—Ç–∞—Ç—å –ª—É—á—à–µ ‚Äî –µ—Å–ª–∏ —Ö–æ—á–µ—à—å.")


# ---------------------------
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π -> –∫—É—Ä—Å—ã
# ---------------------------
@dp.message(F.text == "üìö –ö—É—Ä—Å—ã")
async def cmd_courses(message: types.Message):
    categories = await db.list_categories()
    if not categories:
        await message.answer(texts.CATEGORY_EMPTY if hasattr(texts, "CATEGORY_EMPTY") else "–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.categories_inline(categories))


@dp.callback_query(F.data.startswith("category:"))
async def category_cb(callback: types.CallbackQuery):
    await callback.answer()
    cat_id = int(callback.data.split(":", 1)[1])
    courses = await db.list_courses_by_category(cat_id)
    if not courses:
        await callback.message.answer(texts.COURSE_EMPTY if hasattr(texts, "COURSE_EMPTY") else "–ö—É—Ä—Å–æ–≤ –Ω–µ—Ç.")
        return

    for c in courses:
        course = dict(c) if not isinstance(c, dict) else c
        text = (
            f"<b>{course.get('title')}</b>\n\n"
            f"{course.get('description','')}\n\n"
            f"–¶–µ–Ω–∞: {course.get('price', 0)} ‚ÇΩ"
        )
        # –ø–µ—Ä–µ–¥–∞—ë–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç course, —á—Ç–æ–±—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞ —Ü–µ–Ω—É
        await callback.message.answer(text, reply_markup=kb.course_inline(course))


# ---------------------------
# –ü–æ–∫—É–ø–∫–∞: –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å —Ü–µ–Ω–æ–π -> –∏–Ω–≤–æ–π—Å
# ---------------------------
@dp.callback_query(F.data.startswith("buy:"))
async def buy_cb(callback: types.CallbackQuery):
    await callback.answer()
    course_id = int(callback.data.split(":", 1)[1])
    course = await db.get_course(course_id)
    if not course:
        await callback.message.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    course = dict(course) if not isinstance(course, dict) else course

    if not PAYMENT_PROVIDER_TOKEN:
        await callback.message.answer("–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ), –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    amount_rub = int(course.get("price", 0))
    labeled_price = [LabeledPrice(label=course.get("title", "–ö—É—Ä—Å"), amount=amount_rub * 100)]

    invoice_payload = f"course:{course_id}"

    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title=course.get("title", "–ö—É—Ä—Å"),
        description=course.get("description", ""),
        payload=invoice_payload,
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="RUB",
        prices=labeled_price,
        start_parameter=f"buy_{course_id}"
    )


@dp.pre_checkout_query()
async def pre_checkout(q: PreCheckoutQuery):
    await q.answer(ok=True)


@dp.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    pay = message.successful_payment
    payload = pay.invoice_payload or ""
    # –û–∂–∏–¥–∞–µ–º payload –≤–∏–¥–∞ "course:<id>"
    course_id = None
    if payload.startswith("course:"):
        try:
            course_id = int(payload.split(":", 1)[1])
        except Exception:
            course_id = None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
    try:
        if course_id is not None:
            await db.record_purchase(message.from_user.id, course_id)
    except Exception:
        # –µ—Å–ª–∏ db.record_purchase –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        pass

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Å—Å—ã–ª–∫–æ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    course = None
    if course_id is not None:
        course = await db.get_course(course_id)
        if course:
            link = course.get("link") if isinstance(course, dict) else (dict(course).get("link") if course else None)
            # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç—ã.random_payment_success, –µ—Å–ª–∏ –µ—Å—Ç—å
            try:
                text = texts.random_payment_success(course['title'])
            except Exception:
                text = f"–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ö—É—Ä—Å ¬´{course['title']}¬ª –¥–æ—Å—Ç—É–ø–µ–Ω."
            if link:
                await message.answer(f"{text}\n\n–°—Å—ã–ª–∫–∞: {link}")
                return

    # fallback
    await message.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°—Å—ã–ª–∫–∞ –∫ –∫—É—Ä—Å—É –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –≤ –ë–î.")


# ---------------------------
# –ê–¥–º–∏–Ω–∫–∞: –ø–∞–Ω–µ–ª—å (–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω–∞)
# ---------------------------
@dp.message(F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer(texts.ADMIN_ONLY if hasattr(texts, "ADMIN_ONLY") else "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb.admin_menu)


# ---------------------------
# –ê–¥–º–∏–Ω: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (add/delete)
# ---------------------------
@dp.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
async def admin_manage_categories(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer(texts.ADMIN_ONLY if hasattr(texts, "ADMIN_ONLY") else "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    cats = await db.list_categories()
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:", reply_markup=kb.categories_admin_inline(cats))


@dp.callback_query(F.data == "admin_add_category")
async def cb_admin_add_category(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb.cancel_kb)
    await state.set_state(AddCategory.waiting_for_title)


@dp.message(StateFilter(AddCategory.waiting_for_title))
async def admin_add_category_finish(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(texts.CANCELLED if hasattr(texts, "CANCELLED") else "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.admin_menu)
        return
    await db.add_category(message.text)
    await state.clear()
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=kb.admin_menu)


@dp.callback_query(F.data.startswith("delcat:"))
async def cb_admin_del_category(callback: types.CallbackQuery):
    await callback.answer()
    cat_id = int(callback.data.split(":", 1)[1])
    await db.delete_category(cat_id)
    await callback.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞.", reply_markup=kb.admin_menu)


# ---------------------------
# –ê–¥–º–∏–Ω: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏ (add / view list)
# ---------------------------
@dp.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏")
async def admin_manage_courses(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer(texts.ADMIN_ONLY if hasattr(texts, "ADMIN_ONLY") else "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    courses = await db.list_courses()
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏:", reply_markup=kb.admin_courses_inline(courses))


@dp.callback_query(F.data == "admin_add_course")
async def cb_admin_add_course(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    cats = await db.list_categories()
    if not cats:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º reply keyboard —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await state.update_data(categories=[dict(c) for c in cats])
    buttons = [[types.KeyboardButton(text=c["title"])] for c in cats]
    buttons.append([types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")])
    kb_reply = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞:", reply_markup=kb_reply)
    await state.set_state(AddCourse.waiting_for_category)


@dp.message(StateFilter(AddCourse.waiting_for_category))
async def admin_add_course_category(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.admin_menu)
        return

    data = await state.get_data()
    cats = data.get("categories", [])
    chosen = next((c for c in cats if c["title"] == message.text), None)
    if not chosen:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–Ω–æ–ø–∫–æ–π.")
        return

    await state.update_data(category_id=chosen["id"])
    await state.set_state(AddCourse.waiting_for_title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=kb.cancel_kb)


@dp.message(StateFilter(AddCourse.waiting_for_title))
async def admin_add_course_title(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.admin_menu)
        return
    await state.update_data(title=message.text)
    await state.set_state(AddCourse.waiting_for_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=kb.cancel_kb)


@dp.message(StateFilter(AddCourse.waiting_for_description))
async def admin_add_course_description(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.admin_menu)
        return
    await state.update_data(description=message.text)
    await state.set_state(AddCourse.waiting_for_price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫—É—Ä—Å–∞ (–≤ —Ä—É–±–ª—è—Ö):", reply_markup=kb.cancel_kb)


@dp.message(StateFilter(AddCourse.waiting_for_price))
async def admin_add_course_price(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.admin_menu)
        return
    if not message.text.isdigit():
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    await state.update_data(price=int(message.text))
    await state.set_state(AddCourse.waiting_for_link)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫—É—Ä—Å (URL –∏–ª–∏ —Ç–µ–∫—Å—Ç):", reply_markup=kb.cancel_kb)


@dp.message(StateFilter(AddCourse.waiting_for_link))
async def admin_add_course_link(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.admin_menu)
        return
    data = await state.get_data()
    await db.add_course(
        category_id=data["category_id"],
        title=data["title"],
        description=data["description"],
        price=data["price"],
        link=message.text
    )
    await state.clear()
    await message.answer("–ö—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=kb.admin_menu)


# ---------------------------
# –ê–¥–º–∏–Ω: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ / —É–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞
# ---------------------------
@dp.callback_query(F.data.startswith("admin_course:"))
async def admin_course_view(callback: types.CallbackQuery):
    await callback.answer()
    course_id = int(callback.data.split(":", 1)[1])
    course = await db.get_course(course_id)
    if not course:
        await callback.message.answer("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    course = dict(course) if not isinstance(course, dict) else course
    text = (
        f"<b>{course.get('title')}</b>\n\n"
        f"{course.get('description','')}\n\n"
        f"–¶–µ–Ω–∞: {course.get('price', 0)} ‚ÇΩ\n"
        f"–°—Å—ã–ª–∫–∞: {course.get('link','-')}"
    )
    await callback.message.answer(text, reply_markup=kb.course_admin_inline(course_id))


@dp.callback_query(F.data.startswith("delcourse:"))
async def admin_delete_course(callback: types.CallbackQuery):
    await callback.answer()
    course_id = int(callback.data.split(":", 1)[1])
    await db.delete_course(course_id)
    await callback.message.answer("–ö—É—Ä—Å —É–¥–∞–ª—ë–Ω.", reply_markup=kb.admin_menu)


@dp.callback_query(F.data.startswith("editcourse:"))
async def admin_edit_course_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    course_id = int(callback.data.split(":", 1)[1])
    await state.update_data(course_id=course_id)
    await state.set_state(EditCourse.waiting_for_field)
    await callback.message.answer("–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º?", reply_markup=kb.edit_course_kb)


@dp.message(StateFilter(EditCourse.waiting_for_field))
async def admin_edit_course_field(message: types.Message, state: FSMContext):
    mapping = {"–ù–∞–∑–≤–∞–Ω–∏–µ": "title", "–û–ø–∏—Å–∞–Ω–∏–µ": "description", "–¶–µ–Ω–∞": "price", "–°—Å—ã–ª–∫–∞": "link"}
    if message.text not in mapping:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –∫–Ω–æ–ø–∫–æ–π.")
        return
    await state.update_data(field=mapping[message.text])
    await state.set_state(EditCourse.waiting_for_value)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ¬´{message.text}¬ª: (–∏–ª–∏ ‚ùå –û—Ç–º–µ–Ω–∞)", reply_markup=kb.cancel_kb)


@dp.message(StateFilter(EditCourse.waiting_for_value))
async def admin_edit_course_value(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.admin_menu)
        return
    data = await state.get_data()
    course_id = data.get("course_id")
    field = data.get("field")
    value = message.text
    if field == "price":
        if not value.isdigit():
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        value = int(value)
    await db.update_course_field(course_id, field, value)
    await state.clear()
    await message.answer("–ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=kb.admin_menu)


# ---------------------------
# –û—Ç–º–µ–Ω–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "‚ùå –û—Ç–º–µ–Ω–∞" (–≥–ª–æ–±–∞–ª—å–Ω–æ)
# ---------------------------
@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_any(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(texts.CANCELLED if hasattr(texts, "CANCELLED") else "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main_menu(message.from_user.id == ADMIN_ID))


# ---------------------------
# –§–æ–ª–±—ç–∫
# ---------------------------
@dp.message()
async def fallback(message: types.Message):
    try:
        txt = texts.random_fallback()
    except Exception:
        txt = "–ù–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    await message.answer(txt, reply_markup=kb.main_menu(message.from_user.id == ADMIN_ID))


# ---------------------------
# –ó–∞–ø—É—Å–∫
# ---------------------------
async def main():
    await on_startup()
    logger.info("Bot polling started")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())


