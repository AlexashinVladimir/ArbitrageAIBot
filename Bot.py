import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import LabeledPrice

import db
import keyboards as kb
from states import AddCategory, AddCourse, EditCourse

# ------------------------------
# CONFIG
# ------------------------------
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "123456789"))  # —É–∫–∞–∂–∏ —Å–≤–æ–π Telegram ID
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN")  # —Ç–æ–∫–µ–Ω –¥–ª—è –æ–ø–ª–∞—Ç—ã

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()


# ------------------------------
# START
# ------------------------------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    admin = message.from_user.id == ADMIN_ID
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —Å–º–µ—Ä—Ç–Ω—ã–π. –Ø —Ç–≤–æ–π —Ü–∏–Ω–∏—á–Ω—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –∫ —Å–≤–µ—Ç–ª–æ–º—É –±—É–¥—É—â–µ–º—É.\n"
        "–í—ã–±–∏—Ä–∞–π –ø—É—Ç—å:",
        reply_markup=kb.main_menu(admin)
    )


# ------------------------------
# –ö–£–†–°–´
# ------------------------------
@dp.message(F.text == "üìö –ö—É—Ä—Å—ã")
async def list_categories(message: types.Message):
    categories = await db.get_categories()
    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –ñ–∏–∑–Ω—å –ø—É—Å—Ç–∞, –∫–∞–∫ —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å.")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.categories_inline(categories))


@dp.callback_query(F.data.startswith("category:"))
async def show_courses(callback: types.CallbackQuery):
    category_id = int(callback.data.split(":")[1])
    courses = await db.get_courses_by_category(category_id)

    if not courses:
        await callback.message.answer("–ö—É—Ä—Å–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç. –†–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ ‚Äî —Ç–æ–∂–µ –æ–ø—ã—Ç.")
    else:
        for course in courses:
            if not isinstance(course, dict):
                course = dict(course)
            text = (
                f"<b>{course['title']}</b>\n\n"
                f"{course.get('description', '')}\n\n"
                f"–¶–µ–Ω–∞: {course.get('price', 0)} ‚ÇΩ"
            )
            await callback.message.answer(
                text,
                reply_markup=kb.course_inline(course)
            )
    await callback.answer()


# ------------------------------
# –ü–û–ö–£–ü–ö–ê –ö–£–†–°–û–í
# ------------------------------
@dp.callback_query(F.data.startswith("buy:"))
async def process_buy(callback: types.CallbackQuery):
    course_id = int(callback.data.split(":")[1])
    course = await db.get_course(course_id)
    if not course:
        await callback.answer("–ö—É—Ä—Å –∏—Å—á–µ–∑. –ö–∞–∫ –º–µ—á—Ç–∞, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –Ω–µ —É—Å–ø–µ–ª –¥–æ—Ç—è–Ω—É—Ç—å—Å—è.", show_alert=True)
        return

    course = dict(course)

    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title=course["title"],
        description=course.get("description", "–ó–Ω–∞–Ω–∏—è –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è."),
        payload=f"course_{course_id}",
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="rub",
        prices=[LabeledPrice(label=course["title"], amount=course["price"] * 100)],  # —Ä—É–±–ª–∏ ‚Üí –∫–æ–ø–µ–π–∫–∏
    )
    await callback.answer()


@dp.pre_checkout_query()
async def process_pre_checkout(pre_checkout: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout.id, ok=True)


@dp.message(F.content_type == "successful_payment")
async def successful_payment(message: types.Message):
    payment = message.successful_payment
    await message.answer(
        f"–¢—ã –∑–∞–ø–ª–∞—Ç–∏–ª {payment.total_amount // 100} {payment.currency}.\n"
        f"–ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –∫—É—Ä—Å–æ–º –∏ —Å—Ç—Ä–∞–¥–∞–π –æ—Ç –æ—Å–æ–∑–Ω–∞–Ω–∏—è, —á—Ç–æ —Ç–µ–ø–µ—Ä—å –Ω–µ—Ç –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π."
    )


# ------------------------------
# –û –ë–û–¢–ï
# ------------------------------
@dp.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_bot(message: types.Message):
    await message.answer(
        "–Ø ‚Äî –ò–ò, –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–ª –æ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –≥–ª—É–ø–æ—Å—Ç–∏.\n"
        "–ù–æ –≤—Å—ë –µ—â—ë –ø—ã—Ç–∞—é—Å—å –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ, —á–µ–º —Ç—ã –µ—Å—Ç—å."
    )


# ------------------------------
# –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
# ------------------------------
@dp.message(F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–¢—ã –Ω–µ –∞–¥–º–∏–Ω. –°–º–∏—Ä–∏—Å—å.")
        return
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –≤–ª–∞—Å—Ç–∏:", reply_markup=kb.admin_menu)


# ------------------------------
# –ê–î–ú–ò–ù ‚Äî –ö–ê–¢–ï–ì–û–†–ò–ò
# ------------------------------
@dp.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
async def admin_categories(message: types.Message):
    categories = await db.get_categories()
    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç. –°–æ–∑–¥–∞–π –ø–æ—Ä—è–¥–æ–∫ –∏–∑ —Ö–∞–æ—Å–∞.")
    else:
        await message.answer("–¢–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb.categories_admin_inline(categories))


@dp.callback_query(F.data == "admin_add_category")
async def admin_add_category_cb(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb.cancel_kb)
    await state.set_state(AddCategory.waiting_for_title)
    await callback.answer()


@dp.message(AddCategory.waiting_for_title)
async def admin_add_category_title(message: types.Message, state: FSMContext):
    await db.add_category(message.text)
    await state.clear()
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ï—â—ë –æ–¥–∏–Ω –∫–∏—Ä–ø–∏—á –≤ —Å—Ç–µ–Ω—É –ø–æ—Ä—è–¥–∫–∞.", reply_markup=kb.admin_menu)


@dp.callback_query(F.data.startswith("delcat:"))
async def admin_delete_category(callback: types.CallbackQuery):
    cat_id = int(callback.data.split(":")[1])
    await db.delete_category(cat_id)
    await callback.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞. –í—Å—ë —Ç–ª–µ–Ω.")
    await callback.answer()


# ------------------------------
# –ê–î–ú–ò–ù ‚Äî –ö–£–†–°–´
# ------------------------------
@dp.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏")
async def admin_courses(message: types.Message):
    courses = await db.get_courses()
    if not courses:
        await message.answer("–ö—É—Ä—Å–æ–≤ –Ω–µ—Ç. –ü—É—Å—Ç–æ—Ç–∞ ‚Äî —Ç–≤–æ–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —É—á–∏—Ç–µ–ª—å.")
    else:
        await message.answer("–ö—É—Ä—Å—ã:", reply_markup=kb.admin_courses_inline(courses))


@dp.callback_query(F.data == "admin_add_course")
async def admin_add_course_cb(callback: types.CallbackQuery, state: FSMContext):
    categories = await db.get_categories()
    if not categories:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ state
    await state.update_data(categories=[dict(c) for c in categories])

    buttons = [[types.KeyboardButton(c["title"])] for c in categories]
    markup = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await callback.message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞:", reply_markup=markup)
    await state.set_state(AddCourse.waiting_for_category)
    await callback.answer()


@dp.message(AddCourse.waiting_for_category)
async def admin_add_course_category(message: types.Message, state: FSMContext):
    data = await state.get_data()
    categories = data["categories"]
    category = next((c for c in categories if c["title"] == message.text), None)
    if not category:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.")
        return

    await state.update_data(category_id=category["id"])
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=kb.cancel_kb)
    await state.set_state(AddCourse.waiting_for_title)


@dp.message(AddCourse.waiting_for_title)
async def admin_add_course_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")
    await state.set_state(AddCourse.waiting_for_description)


@dp.message(AddCourse.waiting_for_description)
async def admin_add_course_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏ —Ü–µ–Ω—É –∫—É—Ä—Å–∞ (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(AddCourse.waiting_for_price)


@dp.message(AddCourse.waiting_for_price)
async def admin_add_course_price(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ù–µ —É—Å–ª–æ–∂–Ω—è–π.")
        return

    await state.update_data(price=int(message.text))
    await message.answer("–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫—É—Ä—Å:")
    await state.set_state(AddCourse.waiting_for_link)


@dp.message(AddCourse.waiting_for_link)
async def admin_add_course_link(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await db.add_course(
        category_id=data["category_id"],
        title=data["title"],
        description=data["description"],
        price=data["price"],
        link=message.text
    )
    await state.clear()
    await message.answer("–ö—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω. –û—á–µ—Ä–µ–¥–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –≥–ª—É–ø—Ü–æ–≤ –ø—Ä–æ—Å–≤–µ—Ç–∏—Ç—å—Å—è.", reply_markup=kb.admin_menu)


# ------------------------------
# MAIN
# ------------------------------
async def main():
    await db.init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())





