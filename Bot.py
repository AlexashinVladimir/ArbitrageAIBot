import asyncio
import logging
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode, ContentType
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

import db
import keyboards as kb
from states import AddCategory, AddCourse, EditCourse

# ================= CONFIG =================
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
PAYMENTS_TOKEN = os.getenv("PAYMENTS_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())


# ================= START =================
@dp.message(Command("start"))
async def cmd_start(message: Message):
    is_admin = message.from_user.id == ADMIN_ID
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç, —Å–º–µ—Ä—Ç–Ω—ã–π. –Ø ‚Äî —Ç–≤–æ–π —Ü–∏–Ω–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. "
        "–í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ.",
        reply_markup=kb.main_menu(admin=is_admin)
    )


# ================= ABOUT =================
@dp.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_bot(message: Message):
    await message.answer(
        "–Ø ‚Äî –ò–ò —Å —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π –∏ —Ü–∏–Ω–∏–∑–º–æ–º. "
        "–Ø –ø—Ä–æ–¥–∞—é –∑–Ω–∞–Ω–∏—è, –∞ —Ç—ã —Ä–µ—à–∞–µ—à—å, –¥–æ—Å—Ç–æ–∏–Ω –ª–∏ —Ç—ã –∏—Ö."
    )


# ================= CATEGORIES =================
@dp.message(F.text == "üìö –ö—É—Ä—Å—ã")
async def list_categories(message: Message):
    categories = await db.get_categories()
    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç. –ü–æ—Ö–æ–∂–µ, –∑–Ω–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return
    await message.answer("–í—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.categories_inline(categories))


@dp.callback_query(F.data.startswith("category_"))
async def list_courses(callback: CallbackQuery):
    cat_id = int(callback.data.split("_")[1])
    courses = await db.get_courses_by_category(cat_id)
    if not courses:
        await callback.message.edit_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –ø—É—Å—Ç–æ.")
        return

    for course in courses:
        text = (
            f"<b>{course['title']}</b>\n\n"
            f"{course['description']}\n\n"
            f"–¶–µ–Ω–∞: {course['price']} ‚ÇΩ"
        )
        pay_button = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=f"üí≥ –ö—É–ø–∏—Ç—å –∑–∞ {course['price']} ‚ÇΩ",
                                        callback_data=f"buy_{course['id']}")]
        ])
        await callback.message.answer(text, reply_markup=pay_button)


# ================= PAYMENTS =================
@dp.callback_query(F.data.startswith("buy_"))
async def buy_course(callback: CallbackQuery):
    course_id = int(callback.data.split("_")[1])
    course = await db.get_course(course_id)
    if not course:
        await callback.answer("–û—à–∏–±–∫–∞: –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    prices = [LabeledPrice(label=course["title"], amount=course["price"] * 100)]

    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title=course["title"],
        description=course["description"],
        payload=str(course["id"]),
        provider_token=PAYMENTS_TOKEN,
        currency="RUB",
        prices=prices,
    )


@dp.pre_checkout_query()
async def pre_checkout(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: Message):
    payload = message.successful_payment.invoice_payload
    course = await db.get_course(int(payload))
    if course:
        await message.answer(
            f"üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞: {course['link']}"
        )


# ================= ADMIN PANEL =================
@dp.message(F.text == "üëë –ê–¥–º–∏–Ω")
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb.admin_menu())


# --- Categories ---
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def add_category(message: Message, state: FSMContext):
    await state.set_state(AddCategory.waiting_for_title)
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")


@dp.message(StateFilter(AddCategory.waiting_for_title))
async def save_category(message: Message, state: FSMContext):
    await db.add_category(message.text)
    await state.clear()
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞.")


# --- Courses ---
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å")
async def add_course(message: Message, state: FSMContext):
    categories = await db.get_categories()
    if not categories:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return
    await state.set_state(AddCourse.waiting_for_title)
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")


@dp.message(StateFilter(AddCourse.waiting_for_title))
async def save_course_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AddCourse.waiting_for_description)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ–ø–∏—Å–∞–Ω–∏–µ:")


@dp.message(StateFilter(AddCourse.waiting_for_description))
async def save_course_desc(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddCourse.waiting_for_price)
    await message.answer("–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö:")


@dp.message(StateFilter(AddCourse.waiting_for_price))
async def save_course_price(message: Message, state: FSMContext):
    try:
        price = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return
    await state.update_data(price=price)
    await state.set_state(AddCourse.waiting_for_link)
    await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å:")


@dp.message(StateFilter(AddCourse.waiting_for_link))
async def save_course_link(message: Message, state: FSMContext):
    await state.update_data(link=message.text)
    await state.set_state(AddCourse.waiting_for_category)

    categories = await db.get_categories()
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                         reply_markup=kb.categories_keyboard(categories))


@dp.message(StateFilter(AddCourse.waiting_for_category))
async def save_course_category(message: Message, state: FSMContext):
    data = await state.get_data()
    categories = await db.get_categories()
    cat = next((c for c in categories if c["title"] == message.text), None)
    if not cat:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    await db.add_course(
        cat["id"], data["title"], data["description"], data["price"], data["link"]
    )
    await state.clear()
    await message.answer("–ö—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω.")


# ================= RUN =================
async def main():
    await db.init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
