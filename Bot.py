import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, ContentType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

import db, keyboards as kb, texts, states

# ------------------ –ó–∞–≥—Ä—É–∑–∫–∞ .env ------------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
PAYMENT_TOKEN = os.getenv("PAYMENT_TOKEN")

# ------------------ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ------------------
bot = Bot(token=BOT_TOKEN)  # parse_mode –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ DeprecationWarning
dp = Dispatcher(storage=MemoryStorage())

# ------------------ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ------------------
asyncio.run(db.init_db())

# ------------------ –°—Ç–∞—Ä—Ç ------------------
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(texts.START_TEXT, reply_markup=kb.main_menu_kb())

# ------------------ –û—Ç–º–µ–Ω–∞ ------------------
@dp.message(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(texts.CANCEL_TEXT, reply_markup=kb.main_menu_kb())

# ------------------ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ------------------
@dp.message(lambda message: message.text == "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
        return
    await message.answer(texts.ADMIN_TEXT, reply_markup=kb.admin_menu_kb())

# ------------------ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ------------------
@dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def add_category_start(message: types.Message, state: FSMContext):
    await states.AddCategory.waiting_name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb.cancel_kb())

@dp.message(states.AddCategory.waiting_name)
async def add_category_name(message: types.Message, state: FSMContext):
    await db.add_category(message.text)
    await state.clear()
    await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{message.text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=kb.main_menu_kb())

# ------------------ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π ------------------
@dp.message(lambda message: message.text == "üìö –ö—É—Ä—Å—ã")
async def show_categories(message: types.Message):
    categories = await db.get_categories()
    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.category_kb(categories))

# ------------------ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—Å–æ–≤ ------------------
@dp.callback_query(lambda c: c.data.startswith("user_cat:"))
async def show_courses(call: types.CallbackQuery):
    cat_id = int(call.data.split(":")[1])
    courses = await db.get_courses_by_category(cat_id)
    if not courses:
        await call.message.answer("–ö—É—Ä—Å—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return
    for course in courses:
        text = f"<b>{course[2]}</b>\n{course[3]}\nüí∞ –¶–µ–Ω–∞: {course[4]} RUB"
        await call.message.answer(text, reply_markup=kb.pay_kb(course[0]))

# ------------------ –û–ø–ª–∞—Ç–∞ ------------------
@dp.callback_query(lambda c: c.data.startswith("pay:"))
async def pay_course(call: types.CallbackQuery):
    course_id = int(call.data.split(":")[1])
    course = await db.get_course(course_id)
    if not course:
        await call.message.answer("–û—à–∏–±–∫–∞! –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    await bot.send_invoice(
        chat_id=call.from_user.id,
        title=course[2],
        description=course[3],
        payload=f"course_{course_id}",
        provider_token=PAYMENT_TOKEN,
        currency="RUB",
        prices=[types.LabeledPrice(label=course[2], amount=course[4]*100)]
    )

@dp.pre_checkout_query()
async def checkout(pre_checkout: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout.id, ok=True)

@dp.message(ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment_handler(message: types.Message):
    await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ö—É—Ä—Å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.")

# ------------------ –ó–∞–ø—É—Å–∫ ------------------
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))








