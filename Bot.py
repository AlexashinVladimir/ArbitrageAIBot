import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

import keyboards as kb
import db


logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
PAYMENTS_TOKEN = os.getenv("PAYMENTS_TOKEN")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()


# --- FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ ---
class AddCourse(StatesGroup):
    waiting_for_category = State()
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_link = State()


# --- –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç ---
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    is_admin = message.from_user.id == ADMIN_ID
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —Å–º–µ—Ä—Ç–Ω—ã–π üëã\n\n–Ø —Ç–≤–æ–π —Ü–∏–Ω–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. "
        "–ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ –∫–æ–µ-—á—Ç–æ —Ü–µ–Ω–Ω–æ–µ... –µ—Å–ª–∏ –æ—Å–º–µ–ª–∏—à—å—Å—è.",
        reply_markup=kb.main_menu(is_admin)
    )


# --- –û –±–æ—Ç–µ ---
@dp.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_bot(message: Message):
    await message.answer(
        "–Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç. –Ø —Ç–≤–æ–π —Ñ–∏–ª–æ—Å–æ—Ñ —Å –Ω–∞–º—ë–∫–æ–º –Ω–∞ –∏—Ä–æ–Ω–∏—é.\n\n"
        "–ü–æ–º–æ–≥—É –∫—É–ø–∏—Ç—å –∑–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ª–∏–±–æ —Å–¥–µ–ª–∞—é—Ç —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ, "
        "–ª–∏–±–æ –µ—â—ë –≥–ª—É–±–∂–µ –æ—Å–æ–∑–Ω–∞–µ—à—å –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –≤—Å–µ–≥–æ –≤–æ–∫—Ä—É–≥."
    )


# --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
@dp.message(F.text == "üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def show_categories(message: Message):
    categories = await db.get_categories()
    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.categories_keyboard(categories))


@dp.callback_query(F.data.startswith("category_"))
async def show_courses(callback: CallbackQuery):
    category_id = int(callback.data.split("_")[1])
    courses = await db.get_courses(category_id)
    if not courses:
        await callback.message.edit_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –ø—É—Å—Ç–æ.")
    else:
        for course in courses:
            text = f"<b>{course['title']}</b>\n\n{course['description']}\n\n–¶–µ–Ω–∞: {course['price']} ‚ÇΩ"
            await callback.message.answer(
                text,
                reply_markup=kb.course_keyboard(course['id'], course['price'])
            )
    await callback.answer()


# --- –û–ø–ª–∞—Ç–∞ ---
@dp.callback_query(F.data.startswith("buy_"))
async def buy_course(callback: CallbackQuery):
    course_id, price = callback.data.split("_")[1:]
    price = int(price)

    await bot.send_invoice(
        callback.message.chat.id,
        title="–û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞",
        description="–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å—Å—ã–ª–∫—É.",
        provider_token=PAYMENTS_TOKEN,
        currency="rub",
        prices=[LabeledPrice(label="–ö—É—Ä—Å", amount=price * 100)],
        payload=f"course_{course_id}"
    )
    await callback.answer()


@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout.id, ok=True)


@dp.message(F.content_type == "successful_payment")
async def successful_payment(message: Message):
    payload = message.successful_payment.invoice_payload
    course_id = int(payload.split("_")[1])

    # –¥–æ—Å—Ç–∞—ë–º —Å—Å—ã–ª–∫—É
    categories = await db.get_categories()
    for cat in categories:
        courses = await db.get_courses(cat['id'])
        for c in courses:
            if c['id'] == course_id:
                await message.answer(f"–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞: {c['link']}")
                return


# --- –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ---
@dp.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤–ª–∞—Å—Ç–µ–ª–∏–Ω —Ö–∞–æ—Å–∞:", reply_markup=kb.admin_menu())


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ ---
@dp.callback_query(F.data == "add_category")
async def add_category(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –∂–º–∏ –û—Ç–º–µ–Ω–∞.", reply_markup=kb.cancel_keyboard())
    await state.set_state("waiting_for_category_name")
    await callback.answer()


@dp.message(F.text, state="waiting_for_category_name")
async def save_category(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main_menu(True))
        return
    await db.add_category(message.text)
    await state.clear()
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ", reply_markup=kb.main_menu(True))


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ ---
@dp.callback_query(F.data == "add_course")
async def add_course(callback: CallbackQuery, state: FSMContext):
    categories = await db.get_categories()
    if not categories:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
        return
    await state.set_state(AddCourse.waiting_for_category)
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.categories_keyboard(categories))
    await callback.answer()


@dp.callback_query(F.data.startswith("category_"), AddCourse.waiting_for_category)
async def select_course_category(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[1])
    await state.update_data(category_id=category_id)
    await state.set_state(AddCourse.waiting_for_title)
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=kb.cancel_keyboard())
    await callback.answer()


@dp.message(AddCourse.waiting_for_title)
async def course_title(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main_menu(True))
        return
    await state.update_data(title=message.text)
    await state.set_state(AddCourse.waiting_for_description)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=kb.cancel_keyboard())


@dp.message(AddCourse.waiting_for_description)
async def course_description(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main_menu(True))
        return
    await state.update_data(description=message.text)
    await state.set_state(AddCourse.waiting_for_price)
    await message.answer("–¶–µ–Ω–∞ –∫—É—Ä—Å–∞ –≤ —Ä—É–±–ª—è—Ö:", reply_markup=kb.cancel_keyboard())


@dp.message(AddCourse.waiting_for_price)
async def course_price(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main_menu(True))
        return
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ!")
        return
    await state.update_data(price=int(message.text))
    await state.set_state(AddCourse.waiting_for_link)
    await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –∫—É—Ä—Å:", reply_markup=kb.cancel_keyboard())


@dp.message(AddCourse.waiting_for_link)
async def course_link(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main_menu(True))
        return
    data = await state.get_data()
    await db.add_course(data['category_id'], data['title'], data['description'], data['price'], message.text)
    await state.clear()
    await message.answer("–ö—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ", reply_markup=kb.main_menu(True))


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await db.create_tables()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())






