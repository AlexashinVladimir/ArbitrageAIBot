import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, StateFilter
from dotenv import load_dotenv

import keyboards as kb
import db


# ------------------- –õ–û–ì–ò -------------------
logging.basicConfig(level=logging.INFO)

# ------------------- –ù–ê–°–¢–†–û–ô–ö–ò -------------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()


# ------------------- –°–û–°–¢–û–Ø–ù–ò–Ø -------------------
class AddCategory(StatesGroup):
    waiting_for_name = State()


class AddCourse(StatesGroup):
    choosing_category = State()
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_link = State()


# ------------------- –°–¢–ê–†–¢ -------------------
@dp.message(Command("start"))
async def cmd_start(message: Message):
    is_admin = message.from_user.id == ADMIN_ID
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ–±—É—á–∞—é—â–∏–º –∫—É—Ä—Å–∞–º.",
        reply_markup=kb.main_menu(is_admin)
    )


# ------------------- –ü–†–û–°–ú–û–¢–† –ö–ê–¢–ï–ì–û–†–ò–ô -------------------
@dp.message(F.text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def show_categories(message: Message):
    categories = await db.get_categories()
    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.categories_kb(categories))


@dp.callback_query(F.data.startswith("catview:"))
async def show_courses(callback: CallbackQuery):
    cid = int(callback.data.split(":")[1])
    courses = await db.get_courses(cid)
    if not courses:
        await callback.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤.")
        return
    for course in courses:
        text = f"<b>{course['title']}</b>\n\n{course['description']}"
        price = [LabeledPrice(label=course["title"], amount=course["price"] * 100)]
        await bot.send_invoice(
            chat_id=callback.from_user.id,
            title=course["title"],
            description=course["description"],
            payload=f"course_{course['id']}",
            provider_token=PROVIDER_TOKEN,
            currency="RUB",
            prices=price
        )


# ------------------- –û –ë–û–¢–ï -------------------
@dp.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_bot(message: Message):
    await message.answer("ü§ñ –Ø –Ω–µ–º–Ω–æ–≥–æ —Ü–∏–Ω–∏—á–Ω—ã–π –ò–ò —Å —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π. "
                         "–ü–æ–º–æ–≥–∞—é —Ç–µ–±–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è.")


# ------------------- –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ -------------------
@dp.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=kb.admin_panel())


# --- –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(F.text == "üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
async def manage_categories(message: Message):
    cats = await db.get_categories()
    text = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n" + "\n".join([c["name"] for c in cats]) if cats else "–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç."
    await message.answer(text + "\n\n–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb.cancel_kb())
    await dp.fsm.set_state(AddCategory.waiting_for_name)


@dp.message(StateFilter(AddCategory.waiting_for_name))
async def save_category(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main_menu(message.from_user.id == ADMIN_ID))
        await state.clear()
        return
    await db.add_category(message.text)
    await message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=kb.main_menu(True))
    await state.clear()


# --- –∫—É—Ä—Å—ã
@dp.message(F.text == "üéì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏")
async def manage_courses(message: Message, state: FSMContext):
    categories = await db.get_categories()
    if not categories:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∫—É—Ä—Å–∞:", reply_markup=kb.categories_kb(categories, for_add=True))
    await state.set_state(AddCourse.choosing_category)


@dp.callback_query(StateFilter(AddCourse.choosing_category), F.data.startswith("catadd:"))
async def choose_cat_for_course(callback: CallbackQuery, state: FSMContext):
    cid = int(callback.data.split(":")[1])
    await state.update_data(category_id=cid)
    await state.set_state(AddCourse.waiting_for_title)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=kb.cancel_kb())


@dp.message(StateFilter(AddCourse.waiting_for_title))
async def course_title(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main_menu(True))
        await state.clear()
        return
    await state.update_data(title=message.text)
    await state.set_state(AddCourse.waiting_for_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:", reply_markup=kb.cancel_kb())


@dp.message(StateFilter(AddCourse.waiting_for_description))
async def course_desc(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main_menu(True))
        await state.clear()
        return
    await state.update_data(description=message.text)
    await state.set_state(AddCourse.waiting_for_price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):", reply_markup=kb.cancel_kb())


@dp.message(StateFilter(AddCourse.waiting_for_price))
async def course_price(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main_menu(True))
        await state.clear()
        return
    try:
        price = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    await state.update_data(price=price)
    await state.set_state(AddCourse.waiting_for_link)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫—É—Ä—Å:", reply_markup=kb.cancel_kb())


@dp.message(StateFilter(AddCourse.waiting_for_link))
async def course_link(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.main_menu(True))
        await state.clear()
        return
    data = await state.get_data()
    await db.add_course(data["category_id"], data["title"], data["description"], data["price"], message.text)
    await message.answer("‚úÖ –ö—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=kb.main_menu(True))
    await state.clear()


# ------------------- –û–ü–õ–ê–¢–ê -------------------
@dp.pre_checkout_query()
async def checkout(pre_checkout_q: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message(F.successful_payment)
async def got_payment(message: Message):
    await message.answer("üí∏ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–æ—Ç —Ç–≤–æ–π –∫—É—Ä—Å. –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ.")


# ------------------- –ó–ê–ü–£–°–ö -------------------
async def main():
    await db.init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())


