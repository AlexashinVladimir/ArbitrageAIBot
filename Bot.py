import os
from dotenv import load_dotenv
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import LabeledPrice, PreCheckoutQuery

import db
import keyboards as kb
import texts
import states

# --- Load env ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN", "")

bot = Bot(BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- Start ---
@dp.message(Command("start"))
async def start(message: Message):
    await db.init_db()
    await message.answer(texts.START_TEXT, reply_markup=kb.main_menu_kb())

# --- Admin panel ---
@dp.message(F.text == "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    kb_admin = ReplyKeyboardMarkup(resize_keyboard=True)
    kb_admin.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"))
    kb_admin.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å"))
    kb_admin.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    await message.answer(texts.ADMIN_PANEL_TEXT, reply_markup=kb_admin)

# --- Add Category ---
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def add_category_start(message: Message, state: FSMContext):
    await state.set_state(states.AddCategory.waiting_name)
    await message.answer(texts.ADD_CATEGORY_PROMPT, reply_markup=kb.cancel_kb())

@dp.message(states.AddCategory.waiting_name)
async def add_category_process(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(texts.CANCEL_TEXT, reply_markup=kb.main_menu_kb())
        return
    await db.add_category(message.text)
    await state.clear()
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=kb.main_menu_kb())

# --- List Categories ---
@dp.message(F.text == "üìö –ö—É—Ä—Å—ã")
async def show_categories(message: Message):
    categories = await db.get_categories()
    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return
    await message.answer(texts.CATEGORY_PROMPT, reply_markup=kb.category_kb(categories))

# --- List Courses by category ---
@dp.callback_query(F.data.startswith("user_cat:"))
async def show_courses(query: CallbackQuery):
    category_id = int(query.data.split(":")[1])
    courses = await db.get_courses(category_id)
    if not courses:
        await query.message.answer("–ö—É—Ä—Å—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return
    for course in courses:
        text = f"{course[2]}\n–¶–µ–Ω–∞: {course[4]}‚ÇΩ\n–û–ø–∏—Å–∞–Ω–∏–µ: {course[3]}"
        await query.message.answer(text, reply_markup=kb.pay_kb(course[0]))

# --- Payments (–∑–∞–≥–ª—É—à–∫–∞) ---
@dp.callback_query(F.data.startswith("pay:"))
async def pay_course(query: CallbackQuery):
    course_id = int(query.data.split(":")[1])
    await query.message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.")

# --- Run ---
if __name__ == "__main__":
    import logging
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling(bot))



